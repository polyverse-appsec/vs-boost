{
  "cells": [
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 5:20:17 PM PDT\n\nThe code you've provided is a set of import statements from a JavaScript (or TypeScript) file. It's not a complete program but a part of it. Here's a breakdown of what each line does:\n\n1. `import * as vscode from \"vscode\";`  \nThis line imports the entire module named \"vscode\" and assigns it to a variable named vscode. The \"vscode\" module is a library provided by Visual Studio Code that contains the VS Code API. This API allows developers to extend and automate VS Code. More details can be found here: [VS Code API](https://code.visualstudio.com/api/references/vscode-api)\n\n2. `import * as fs from \"fs\";`  \nThis line imports the entire module named \"fs\" (file system) and assigns it to a variable named fs. The \"fs\" module is a core Node.js module that provides an API for interacting with the file system in a manner closely modeled around standard POSIX functions. More details can be found here: [Node.js fs module](https://nodejs.org/api/fs.html)\n\n3. `import axios from \"axios\";`  \nThis line imports the default export from the \"axios\" module. Axios is a popular, promise-based HTTP client that sports an easy-to-use API and can be used both in the browser and Node.js. More details can be found here: [Axios](https://github.com/axios/axios)\n\n4. `import axiosRetry from \"axios-retry\";`  \nThis line imports the default export from the \"axios-retry\" module. Axios Retry is a library that adds a retry feature to the axios HTTP client. This is useful in scenarios where you want your application to try a request again if it fails initially. More details can be found here: [Axios Retry](https://github.com/softonic/axios-retry)\n\n5. `import PQueue from \"p-queue\";`  \nThis line imports the default export from the \"p-queue\" module. P-Queue is a library that allows you to process multiple promises concurrently. You can specify how many promises to run at once, and it will queue the rest. More details can be found here: [P-Queue](https://github.com/sindresorhus/p-queue)\n\n6. `import { mapError } from \"./error\";`  \nThis line imports a specific function (or object, or value) named \"mapError\" from a local module located in the same directory as this file, named \"error.js\" or \"error.ts\". The specifics of what \"mapError\" does would depend on the implementation in that file.\n\nThere doesn't appear to be any specific algorithm used in this code snippet as it's primarily importing modules for use elsewhere in the code. Also, without additional architectural guidelines or constraints, it's hard to comment on consistency or conflicts between the code and such guidelines. However, this code seems to be well-organized and modular, which are general good practices in software development."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "0",
      "value": "import * as vscode from \"vscode\";\nimport * as fs from \"fs\";\nimport axios from \"axios\";\nimport axiosRetry from \"axios-retry\";\nimport PQueue from \"p-queue\";\nimport { mapError } from \"./error\";\n",
      "kind": 2,
      "metadata": {
        "id": 0,
        "type": "originalCode",
        "lineNumberBase": 4
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 5:20:55 PM PDT\n\nThis code is written in JavaScript, specifically using ECMAScript 6 (ES6) syntax.\n\nThe code is importing specific items from a module named `jupyter_notebook`. The items being imported are `BoostNotebook`, `BoostNotebookCell`, and `NOTEBOOK_GUIDELINES_PRE_EXTENSION`.\n\nHere's a detailed breakdown:\n\n1. `import`: This is an ES6 keyword used to import functions, objects or values from other modules or files. This is part of the ES6 module system, which is a way to share code across files. \n\n2. `{ BoostNotebook, BoostNotebookCell, NOTEBOOK_GUIDELINES_PRE_EXTENSION }`: These are the specific items being imported from the `jupyter_notebook` module. They could be functions, classes, or other exported values. \n\n3. `from \"./jupyter_notebook\";`: This specifies the module from which the items are being imported. The `./` indicates that the module is located in the same directory as the current file.\n\nHere's what we can infer about the imported items:\n\n- `BoostNotebook`: This is likely a class or constructor function for creating 'BoostNotebook' objects. These objects might represent notebooks in the Boostnote application, which is a note-taking application for developers.\n\n- `BoostNotebookCell`: This is likely a class or constructor function for creating 'BoostNotebookCell' objects. These objects might represent individual cells in a Boostnote notebook. In Jupyter notebooks, a cell is a container for text to be displayed in the notebook or code to be executed by the notebook's kernel.\n\n- `NOTEBOOK_GUIDELINES_PRE_EXTENSION`: This is likely a constant value. The name suggests it might be used as a pre-extension for notebook guidelines. However, without further context, it's hard to say exactly what it's used for.\n\nIt's important to note that this code doesn't actually do anything by itself. It just makes the specified items available for use in the rest of the file. To understand what these items do, you would need to look at the code in the `jupyter_notebook` module, and at the code in the current file that uses these items.\n\nThis code doesn't appear to use any specific algorithms. It's just importing items from a module.\n\nFor more information on ES6 imports, you can refer to this link: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) \n\nAs per the provided architectural guidelines, there are no special constraints or guidelines. Therefore, without additional context, it's hard to say whether this code aligns with the project's architecture. However, the use of ES6 modules is a common practice in modern JavaScript development, as it helps to organize code and manage dependencies."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "1",
      "value": "\nimport { BoostNotebook, BoostNotebookCell,\n    NOTEBOOK_GUIDELINES_PRE_EXTENSION } from \"./jupyter_notebook\";\n",
      "kind": 2,
      "metadata": {
        "id": 1,
        "type": "originalCode",
        "lineNumberBase": 6
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 5:21:13 PM PDT\n\nThis is a very short piece of code written in TypeScript, which is a statically typed superset of JavaScript. It's importing a function named `getBoostFile` and a type named `BoostFileType` from a module located at \"./extension\". \n\nHere's the breakdown:\n\n- `import`: This keyword is used to import functions, objects or values from other modules or files into the current file.\n- `{ getBoostFile, BoostFileType }`: These are the specific entities being imported from the module. In this case, `getBoostFile` is a function and `BoostFileType` is a type.\n- `from \"./extension\"`: This specifies the relative path to the module from which the entities are being imported. Here, the entities are being imported from a file named `extension` in the same directory as the current file. \n\nAs for the algorithms used, there aren't any algorithms in this code snippet. It's just an import statement, which is part of the ECMAScript 6 (ES6) module system. \n\nThis code does not give any indication of what the `getBoostFile` function or `BoostFileType` type do, so without additional context, it's impossible to determine whether this code is consistent with any architectural guidelines or constraints.\n\nFor more information on ES6 import/export syntax, you might find this link helpful: [MDN Web Docs: import](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import)"
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "2",
      "value": "import { getBoostFile, BoostFileType } from \"./extension\";\n",
      "kind": 2,
      "metadata": {
        "id": 2,
        "type": "originalCode",
        "lineNumberBase": 8
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 5:21:28 PM PDT\n\nThis line of code is written in TypeScript, a statically typed superset of JavaScript that adds types to the language. \n\nThis line is importing a specific type or interface, `BoostUserAnalysisType`, from another module, `userAnalysisType`.\n\nThe `import` statement is used to import functions, objects, or values from an external module or file into the current file. The syntax `{ BoostUserAnalysisType }` indicates that it is importing a specific export from the module. This is known as named import.\n\n`BoostUserAnalysisType` is likely a type or interface defined in the `userAnalysisType` module. This could be used to define the shape of an object, function, or variable in the current file.\n\nWithout additional code, it's hard to provide more detail. However, the purpose of this line is to include a specific type or interface from another module to be used in the current module.\n\nAs for the architectural guidelines, since there are no additional special architectural guidelines or constraints mentioned, this line of code seems to be following common best practices for modular code organization in TypeScript.\n\nFor more information on TypeScript's module system, you can refer to their documentation here: [TypeScript Modules](https://www.typescriptlang.org/docs/handbook/modules.html)."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "3",
      "value": "import { BoostUserAnalysisType } from './userAnalysisType';\n",
      "kind": 2,
      "metadata": {
        "id": 3,
        "type": "originalCode",
        "lineNumberBase": 9
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 5:21:53 PM PDT\n\nThis code is written in TypeScript, which is a typed superset of JavaScript that adds optional types to the language. TypeScript is designed for the development of large applications and transcompiles to JavaScript.\n\nThe code snippet you provided is an import statement. It imports a module named `BoostConfiguration` from a local file named `boostConfiguration`. \n\nHere's a breakdown of the code:\n\n1. `import`: This is a reserved keyword in JavaScript and TypeScript used to import functions, objects, or values from other files or modules.\n\n2. `{ BoostConfiguration }`: This syntax is known as object destructuring. It enables you to import only the `BoostConfiguration` export from the `boostConfiguration` module. If the module exported multiple items, you could import only the ones you need by including their names in the curly braces.\n\n3. `from`: This is another reserved keyword used in import statements. It specifies the path to the module from which to import.\n\n4. `\"./boostConfiguration\"`: This is the path to the module. The `./` at the start indicates that the module is in the same directory as the current file. The file extension is omitted because JavaScript and TypeScript automatically assume `.js` or `.ts` extensions if none is provided.\n\nThe purpose of this code is to make the `BoostConfiguration` export from the `boostConfiguration` module available in the current file. This allows the current file to use `BoostConfiguration` as if it were defined in the same file.\n\nFor more about import and export in JavaScript and TypeScript, you can refer to the following links:\n- [JavaScript Modules: Import and Export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules)\n- [TypeScript Modules](https://www.typescriptlang.org/docs/handbook/modules.html)\n\nSince you didn't provide any specific architectural guidelines or constraints, I can't comment on the consistency or conflicts between the code and the guidelines. However, using import statements to organize code into modules is a common practice that can help make code more maintainable and reusable."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "4",
      "value": "import { BoostConfiguration } from \"./boostConfiguration\";\n",
      "kind": 2,
      "metadata": {
        "id": 4,
        "type": "originalCode",
        "lineNumberBase": 10
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 5:22:23 PM PDT\n\nThe code you've provided is a single line of JavaScript code that imports a module named `boostLogging` from another JavaScript file in the same directory.\n\nLet's break it down:\n\n- `import`: This is a keyword in JavaScript that is used to import functions, objects or values from other modules or files. This keyword is part of ES6 (ECMAScript 2015) modules syntax.\n\n- `{ boostLogging }`: This is a named import. It means that the module you're importing from has exported something using the name `boostLogging`. The curly braces are used for importing specific named exports from a module. \n\n- `from`: This keyword is used to specify the path of the module you are importing from.\n\n- `\"./boostLogging\"`: This is the path to the module you're importing from. The `./` means that the module is in the same directory as the current file. The lack of a file extension implies that the file is a `.js` file, as JavaScript files are the default.\n\nSo, in summary, this line of code is importing a named export `boostLogging` from a module named `boostLogging.js` that's in the same directory as the current file.\n\nAs for the algorithms used, since this is just an import statement, there are no algorithms involved. This line of code doesn't perform any operations or calculations, it just makes the `boostLogging` export available to be used in the current file.\n\nTo learn more about ES6 modules and import/export syntax, you can refer to this Mozilla Developer Network (MDN) documentation: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules)\n\nRegarding the architectural guidelines, since there are no specific guidelines provided, there's not much to say. This import statement appears to be pretty standard and doesn't seem to conflict with any general architectural principles. However, without more context (i.e., the rest of the codebase), it's difficult to say for certain."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "5",
      "value": "import { boostLogging } from \"./boostLogging\";\n",
      "kind": 2,
      "metadata": {
        "id": 5,
        "type": "originalCode",
        "lineNumberBase": 11
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 5:22:45 PM PDT\n\nThe code you provided is a part of a JavaScript (or TypeScript) file that is importing specific functions from another module named \"authorization\". The two functions being imported are `fetchGithubSession` and `getCurrentOrganization`. \n\n`import` is a part of ES6 (ECMAScript 6) modules system. ES6 is a standard for JavaScript that provides many useful features, including a module system which allows you to split your code into separate modules, each of which can import functionality from other modules and/or export its own functionality for other modules to use.\n\nHere's a brief explanation of the functions being imported:\n\n1. `fetchGithubSession`: This function's name suggests that it is used to fetch a session from GitHub. The details of how it does this are not given in the code snippet you provided. It probably interacts with the GitHub API in some way to authenticate a user session.\n\n2. `getCurrentOrganization`: The name of this function suggests that it retrieves the current organization context for the authenticated user. The specifics of how it does this are not provided in the code snippet. It likely also interacts with the GitHub API to fetch this information.\n\nSince there are no special architectural guidelines or constraints provided for this software project, the analysis is limited to these general observations.\n\nFor more information about ES6 modules, you can refer to this link: [ES6 Modules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules)\n\nFor more information about GitHub API that these functions may interact with, you can refer to this link: [GitHub API](https://docs.github.com/en/rest)"
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "6",
      "value": "import { fetchGithubSession, getCurrentOrganization } from \"./authorization\";\n",
      "kind": 2,
      "metadata": {
        "id": 6,
        "type": "originalCode",
        "lineNumberBase": 12
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 5:23:10 PM PDT\n\nThis piece of code is written in JavaScript and it uses the `axios` and `axios-retry` libraries for making HTTP requests and handling retries, respectively.\n\nAxios is a popular, promise-based HTTP client that works both in the browser and in a Node.js environment. It provides a single API for dealing with XMLHttpRequests and Node's HTTP interface. You can find more information about Axios here: https://github.com/axios/axios\n\n`axios-retry` is a library that adds a layer of retry functionality to Axios. It allows you to automatically retry failed requests, which can be useful in situations where a server might be temporarily down or a network connection might be unreliable. You can find more information about `axios-retry` here: https://github.com/softonic/axios-retry\n\nThe code snippet is using the `axiosRetry` function from the `axios-retry` library to add retry functionality to the `axios` http client. The configuration object passed to the `axiosRetry` function specifies that it should retry failed requests 3 times (`retries: 3`) and that the delay between retries should increase exponentially (`retryDelay: axiosRetry.exponentialDelay`).\n\nThe exponential backoff strategy used here is a standard algorithm used in computer networks to back off after a failed attempt. It is used to avoid flooding the network or server with constant requests. After each failed attempt, it waits twice as long as the previous wait time before trying again. This strategy helps to give the network or server time to recover before the next attempt.\n\nThe comment at the beginning of the code explains that this retry mechanism is a generic handler for timeouts and other errors that might occur when making requests to openai and lambda. The use of a retry mechanism like this can help to make the application more robust and reliable, as it can recover from temporary failures without requiring manual intervention."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "7",
      "value": "\n// we can get timeouts and other errors from both openai and lambda. This is a generic handler for those\n// conditions to attempt a retry.\naxiosRetry(axios, {\n    retries: 3,\n    retryDelay: axiosRetry.exponentialDelay,\n});\n",
      "kind": 2,
      "metadata": {
        "id": 7,
        "type": "originalCode",
        "lineNumberBase": 16
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 5:23:35 PM PDT\n\nThis line of code is initializing a new instance of a priority queue using the `PQueue` class. A priority queue is a type of data structure that holds elements each with a priority assigned to it. Elements with higher priority are dequeued before elements with lower priority.\n\nThe `PQueue` class is not a native JavaScript class, so it must be imported from a library. One such library is `p-queue`, a priority queue implementation for JavaScript that is designed to handle promises. You can check out the library on [GitHub](https://github.com/sindresorhus/p-queue).\n\nThe `{ concurrency: 1 }` passed to the `PQueue` constructor is an options object. The `concurrency` option controls how many promises from the queue are allowed to run at the same time. In this case, the concurrency is set to `1`, meaning only one promise will be executed at a time. This is effectively making the queue a sequence of promises.\n\nWhen you add a promise to the queue, it will be executed when its turn comes up based on its priority and the concurrency setting. If you add a non-promise value, it will be treated as a promise that is already resolved with that value.\n\nIf you want to learn more about how priority queues work in general, you can check out this [Priority Queue article](https://www.geeksforgeeks.org/implementation-priority-queue-javascript/) on Geeks for Geeks.\n\nAs for the architectural guidelines, since there are no additional special architectural guidelines or constraints provided, this code is assumed to be consistent with the project's architecture. However, it's important to note that the use of priority queues and promises can have architectural implications, depending on how they're used. For instance, setting a low concurrency can limit the throughput of your application, while setting a high concurrency can lead to resource contention."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "8",
      "value": "\nconst queue = new PQueue({ concurrency: 1 });\n",
      "kind": 2,
      "metadata": {
        "id": 8,
        "type": "originalCode",
        "lineNumberBase": 21
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 5:24:13 PM PDT\n\nThis TypeScript code defines a class named `BoostServiceHelper`. The class is designed to interact with a service (possibly a web service) that provides some kind of functionality for a notebook. The notebook could be a standard Visual Studio Code notebook or a BoostNotebook, a custom notebook type.\n\nThe `BoostServiceHelper` class has properties to hold the command, output type, host extension, and a function to handle service errors. The class also has a constructor to initialize these properties.\n\nThe class provides several methods:\n\n1. `serviceEndpoint`: This is a getter method that throws an error because it is not implemented. It is expected that any class that extends `BoostServiceHelper` will provide its own implementation of this method.\n\n2. `outputType`: This is a getter method that returns the output type of the service.\n\n3. `doKernelExecution`: This asynchronous method executes a command on a notebook. It takes a notebook, a cell, an execution context, an extra payload, and a service endpoint as parameters. It builds a payload from the parameters and calls `onProcessServiceRequest` method.\n\n4. `onProcessServiceRequest`: This asynchronous method processes a service request. It takes an execution context, a notebook, a cell, a payload, and a service endpoint as parameters. It makes a service request and handles any errors that occur during the request.\n\n5. `getGuidelines`: This method returns a list of guidelines for the service. It reads the guidelines from a file.\n\n6. `makeBoostServiceRequest`: This asynchronous method makes a request to the Boost service. It takes a cell, a service endpoint, and a payload as parameters. It handles any errors that occur during the request.\n\n7. `onBoostServiceRequest`: This asynchronous method makes a request to the Boost service. It takes a cell, a service endpoint, and a payload as parameters. It adds the request to a queue and returns the response data.\n\nThis code does not appear to use any specific algorithms, but it does use the Promise-based `async/await` pattern for handling asynchronous operations. This pattern is common in JavaScript and TypeScript for handling operations that may take some time to complete, such as network requests.\n\nFor further reading on TypeScript classes, you may refer to the [TypeScript Handbook](https://www.typescriptlang.org/docs/handbook/2/classes.html). For more information on Promises and the `async/await` pattern, you may refer to the [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises)."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "9",
      "value": "\nexport class BoostServiceHelper {\n    private dynamicInputKey: string; // name of the input parameter\n    command: string;\n    _outputType: string;\n\n    hostExtension: any;\n\n    onServiceError: any;\n\n    constructor(\n        command: string,\n        outputType : string,\n        hostExtension: any,\n        dynamicInputKey: string = \"\",\n        onServiceError: any = undefined,\n    ) {\n        this.dynamicInputKey = dynamicInputKey;\n        this.command = command;\n        this._outputType = outputType;\n        this.hostExtension = hostExtension;\n        this.onServiceError = onServiceError;\n    }\n\n    get serviceEndpoint(): string {\n        throw new Error(\"serviceEndpoint not implemented\");\n    }\n\n    get outputType(): string {\n        return this._outputType;\n    }\n\n    async doKernelExecution(\n        notebook: vscode.NotebookDocument | BoostNotebook | undefined,\n        cell: vscode.NotebookCell | BoostNotebookCell | undefined,\n        execution: vscode.NotebookCellExecution | undefined,\n        extraPayload: any,\n        serviceEndpoint: string = this.serviceEndpoint,\n    ): Promise<any> {\n        const usingBoostNotebook = cell?\"value\" in cell:true; // look for the value property to see if its a BoostNotebookCell\n\n        // get the code from the cell\n        const input = usingBoostNotebook\n            ? cell?(cell as BoostNotebookCell).value:undefined\n            : (cell as vscode.NotebookCell).document.getText();\n\n        let payload = {\n            ...extraPayload\n        };\n        if (input) {\n            payload = {\n                ...payload,\n                [this.dynamicInputKey]: input,\n            };\n        }\n        if (notebook) {\n            payload = {\n                ...payload,\n                contextMetadata: JSON.stringify(notebook.metadata)\n            };\n        }\n        if (cell) {\n            payload = {\n                ...payload,\n                inputMetadata: JSON.stringify(cell.metadata),\n            };\n        }\n        // insert auth token if needed\n        if (!payload.session) {\n            const session = await fetchGithubSession();\n            payload = {\n                ...payload,\n                session: session.accessToken,\n            };\n        }\n        // insert auth token if needed\n        if (!payload.organization) {\n            payload = {\n                ...payload,\n                organization: await getCurrentOrganization(),\n            };\n        }\n    \n        // inject guidelines into the payload to guide analysis with user input\n        const guidelines = this.getGuidelines();\n        // Add guidelines to the payload only if it's not undefined or an empty array\n        if (guidelines && guidelines.length > 0) {\n            // we mark it as the system role since it may be used as hints\n            payload.guidelines = JSON.stringify([\"system\", guidelines]);\n        }\n\n        // inject blueprint/summaries into the payload for analysis context (overall project view)\n        const summaries = this.hostExtension.getSummaries(\n            BoostUserAnalysisType.blueprint\n        );\n        // Add summaries to the payload only if it's not undefined or an empty array\n        if (summaries && summaries.length > 0) {\n            // we mark it as the system role since it may be used as hints\n            payload.summaries = JSON.stringify([\"system\", summaries]);\n        }\n\n        // read any cell-specific temperature or top_p settings\n        if (cell?.metadata?.analysisRankedProbability) {\n            payload = {\n                ...payload,\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n                top_p: cell.metadata.analysisRankedProbability,\n            };\n        } else if (cell?.metadata?.temperature) {\n            payload = { ...payload, temperature: cell.metadata.temperature };\n        } else if (\n            BoostConfiguration.analysisRankedProbabilityByKernel(this.command)\n        ) {\n            payload = {\n                ...payload,\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n                top_p: BoostConfiguration.analysisRankedProbabilityByKernel(\n                    this.command\n                ),\n            };\n        } else if (BoostConfiguration.analysisRankedProbability) {\n            payload = {\n                ...payload,\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n                top_p: BoostConfiguration.analysisRankedProbability,\n            };\n        } else if (\n            BoostConfiguration.analysisTemperatureByKernel(this.command)\n        ) {\n            payload = {\n                ...payload,\n                temperature: BoostConfiguration.analysisTemperatureByKernel(\n                    this.command\n                ),\n            };\n        } else if (BoostConfiguration.analysisTemperature) {\n            payload = {\n                ...payload,\n                temperature: BoostConfiguration.analysisTemperature,\n            };\n        } else {\n            payload = payload;\n        }\n\n        // model pass through\n        if (cell?.metadata?.model) {\n            payload = { ...payload, model: cell.metadata.model };\n        } else if (BoostConfiguration.analysisModelByKernel(this.command)) {\n            payload = {\n                ...payload,\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n                model: BoostConfiguration.analysisModelByKernel(this.command),\n            };\n        } else if (BoostConfiguration.analysisModel) {\n            payload = {\n                ...payload,\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n                model: BoostConfiguration.analysisModel,\n            };\n        }\n\n        return await this.onProcessServiceRequest(\n            execution,\n            notebook,\n            cell,\n            payload,\n            serviceEndpoint\n        );\n    }\n\n\n    async onProcessServiceRequest(\n        execution: vscode.NotebookCellExecution | undefined,\n        notebook: vscode.NotebookDocument | BoostNotebook | undefined,\n        cell: vscode.NotebookCell | BoostNotebookCell | undefined,\n        payload: any,\n        serviceEndpoint: string = this.serviceEndpoint\n    ): Promise<any> {\n        let successfullyCompleted = true;\n        const usingBoostNotebook = cell?\"value\" in cell:true; // look for the value property to see if its a BoostNotebookCell\n\n        // using axios, make a web POST call to Boost Service with the code as in a json object code=code\n        let response;\n        let serviceError: Error = new Error();\n        try {\n            response = await this.makeBoostServiceRequest(\n                cell,\n                serviceEndpoint,\n                payload\n            );\n        } catch (err: any) {\n            successfullyCompleted = false;\n            serviceError = err;\n        }\n        if (successfullyCompleted) {\n            if (response instanceof Error) {\n                successfullyCompleted = false;\n                serviceError = response as Error;\n            } else if (response === undefined) {\n                throw new Error(\"Unexpected empty result from Boost Service\");\n            } else if (response.data instanceof Error) {\n                successfullyCompleted = false;\n                serviceError = response.data as Error;\n            }\n        }\n        if (successfullyCompleted) {\n            return response;\n        } else {\n            throw serviceError;\n        }\n    }\n\n    getGuidelines(): string[] {\n        const guidelines: string[] = [];\n        const projectGuidelinesFile = getBoostFile(\n            undefined,\n            BoostFileType.guidelines,\n            false\n        );\n        if (\n            projectGuidelinesFile &&\n            fs.existsSync(projectGuidelinesFile.fsPath)\n        ) {\n            const projectGuidelines = new BoostNotebook();\n            projectGuidelines.load(projectGuidelinesFile.fsPath);\n            projectGuidelines.cells.forEach((cell) => {\n                if (this.hostExtension.sampleGuidelineRegEx.test(cell.value)) {\n                    // ignore sample text\n                    return;\n                }\n                guidelines.push(cell.value);\n            });\n        }\n\n        // this kernel guideline file\n        const kernelGuidelinesFile = projectGuidelinesFile.fsPath.replace(\n            NOTEBOOK_GUIDELINES_PRE_EXTENSION,\n            `.${this.hostExtension.getUserAnalysisType(\n                this.command\n            )}${NOTEBOOK_GUIDELINES_PRE_EXTENSION}`\n        );\n        if (fs.existsSync(kernelGuidelinesFile)) {\n            const projectGuidelines = new BoostNotebook();\n            projectGuidelines.load(kernelGuidelinesFile);\n            projectGuidelines.cells.forEach((cell) => {\n                if (this.hostExtension.sampleGuidelineRegEx.test(cell.value)) {\n                    // ignore sample text\n                    return;\n                }\n                guidelines.push(cell.value);\n            });\n        }\n\n        return guidelines;\n    }\n\n    async makeBoostServiceRequest(\n        cell: vscode.NotebookCell | BoostNotebookCell | undefined,\n        serviceEndpoint: string,\n        payload: any\n    ): Promise<any> {\n        try {\n            if (\n                BoostConfiguration.serviceFaultInjection > 0 &&\n                Math.floor(Math.random() * 100) <\n                    BoostConfiguration.serviceFaultInjection\n            ) {\n                const cellId = cell?\n                    (cell instanceof BoostNotebookCell\n                        ? cell.id\n                        : cell.document.uri.toString()):\"undefined\";\n                boostLogging.debug(\n                    `Injecting fault into service request for cell ${cellId} to ${serviceEndpoint}`\n                );\n                await axios.get(\n                    \"https://serviceFaultInjection/synthetic/error/\"\n                );\n            }\n            let result: any = await this.onBoostServiceRequest(\n                cell,\n                serviceEndpoint,\n                payload\n            );\n            if (result.error) {\n                // if we have an error, throw it - this is generally happens with the local service shim\n                return new Error(\n                    `Boost Service failed with a network error: ${result.error}`\n                );\n            }\n            return result;\n        } catch (err: any) {\n            if (this.onServiceError) {\n                this.onServiceError(err);\n            }\n            return mapError(err);\n        }\n    }\n\n    async onBoostServiceRequest(\n        cell: vscode.NotebookCell | BoostNotebookCell | undefined,\n        serviceEndpoint: string,\n        payload: any\n    ): Promise<string> {\n        const headers = {\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            \"User-Agent\": `Boost-VSCE/${BoostConfiguration.version}`,\n        };\n\n        // Add the request to the queue\n        return queue.add(() =>\n            axios\n                .post(serviceEndpoint, payload, { headers })\n                .then((response) => {\n                    return response.data;\n                })\n                .catch((error) => {\n                    throw error;\n                })\n        );\n    }\n\n}\n",
      "kind": 2,
      "metadata": {
        "id": 9,
        "type": "originalCode",
        "lineNumberBase": 23
      }
    }
  ],
  "metadata": {
    "defaultDir": ".boost",
    "sourceFile": "./src/boostServiceHelper.ts"
  }
}