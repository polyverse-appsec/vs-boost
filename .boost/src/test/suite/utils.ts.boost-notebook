{
  "cells": [
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "application/vnd.code.notebook.error",
              "data": "Error: Boost Code Explanation failed: Boost Cloud Service could not be resolved. Please check your internet connection, and try again."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "0",
      "value": "\nimport * as vscode from 'vscode';\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport { debug } from 'console';\n",
      "kind": 2,
      "metadata": {
        "id": 0,
        "type": "originalCode",
        "lineNumberBase": 3
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "application/vnd.code.notebook.error",
              "data": "Error: Boost Code Explanation failed: Boost Cloud Service could not be resolved. Please check your internet connection, and try again."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "1",
      "value": "\nexport const seconds = 1000;\nexport const minutes = 60 * seconds;\n\nexport function getRandomTestSourceFile() : string {\n    const testCodePath = path.resolve(__dirname, '../resources/');\n    const supportedExtensions = ['.c', '.vb', '.cpp', '.ts', '.php', '.rb'];\n\n    // Get all files in the folder\n    const allFiles = fs.readdirSync(testCodePath);\n\n    // Filter files based on extensions (exclude unsupported files)\n    const filteredFiles = allFiles.filter(file => {\n        const ext = path.extname(file);\n        return ext !== \"\" && supportedExtensions.includes(ext);\n    });\n\n    let randomFile: string;\n    const targetTestInputPath = path.resolve(testCodePath, 'targetTestInput.json');\n    console.log(`Looking for ${targetTestInputPath}`);\n    if (fs.existsSync(targetTestInputPath)) {\n        const targetTestInput = JSON.parse(fs.readFileSync(targetTestInputPath, 'utf-8'));\n        randomFile = path.resolve(testCodePath, targetTestInput.filename[0]);\n        console.log('Read targetTestInput.json, using file:', randomFile);\n    } else {\n        // Select a random file from the filtered files\n        console.log('No targetTestInput.json, selecting random file from:', filteredFiles);\n        const randomIndex = Math.floor(Math.random() * filteredFiles.length);\n        randomFile = path.resolve(testCodePath,filteredFiles[randomIndex]);\n    }\n    \n    debug(\"Source File: \" + randomFile);\n    return randomFile;\n}\n",
      "kind": 2,
      "metadata": {
        "id": 1,
        "type": "originalCode",
        "lineNumberBase": 8
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "application/vnd.code.notebook.error",
              "data": "Error: Boost Code Explanation failed: Boost Cloud Service could not be resolved. Please check your internet connection, and try again."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "2",
      "value": "\nasync function selectFileInExplorer(filePath: string): Promise<void> {\n    const uri = vscode.Uri.file(filePath);\n    const resource = await vscode.workspace.fs.stat(uri);\n    if (resource) {\n        await vscode.commands.executeCommand('workbench.files.action.focusFilesExplorer');\n        await vscode.commands.executeCommand('revealInExplorer', uri);\n    }\n}\n",
      "kind": 2,
      "metadata": {
        "id": 2,
        "type": "originalCode",
        "lineNumberBase": 39
      }
    }
  ],
  "metadata": {
    "defaultDir": ".boost",
    "sourceFile": "./src/test/suite/utils.ts"
  }
}