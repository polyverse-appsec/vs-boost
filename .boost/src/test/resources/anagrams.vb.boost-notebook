{
  "cells": [
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "application/vnd.code.notebook.error",
              "data": "Error: Boost Code Explanation failed: Boost Cloud Service could not be resolved. Please check your internet connection, and try again."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "vb",
      "id": "0",
      "value": "\nImports System.IO\nImports System.Collections.ObjectModel\n\nModule Module1\n\n  Dim sWords As New Dictionary(Of String, Collection(Of String))\n",
      "kind": 2,
      "metadata": {
        "id": 0,
        "type": "originalCode",
        "lineNumberBase": -1
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "application/vnd.code.notebook.error",
              "data": "Error: Boost Code Explanation failed: Boost Cloud Service could not be resolved. Please check your internet connection, and try again."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "vb",
      "id": "1",
      "value": "  Sub Main()\n\n    Dim oStream As StreamReader = Nothing\n    Dim sLines() As String = Nothing\n    Dim sSorted As String = Nothing\n    Dim iHighCount As Integer = 0\n    Dim iMaxKeyLength As Integer = 0\n    Dim sOutput As String = \"\"\n\n    oStream = New StreamReader(\"unixdict.txt\")\n    sLines = oStream.ReadToEnd.Split(New String() {vbCrLf}, StringSplitOptions.RemoveEmptyEntries)\n    oStream.Close()\n\n    For i As Integer = 0 To sLines.GetUpperBound(0)\n      sSorted = SortCharacters(sLines(i))\n\n      If Not sWords.ContainsKey(sSorted) Then sWords.Add(sSorted, New Collection(Of String))\n\n      sWords(sSorted).Add(sLines(i))\n\n      If sWords(sSorted).Count > iHighCount Then\n        iHighCount = sWords(sSorted).Count\n\n        If sSorted.Length > iMaxKeyLength Then iMaxKeyLength = sSorted.Length\n      End If\n    Next\n\n    For Each sKey As String In sWords.Keys\n      If sWords(sKey).Count = iHighCount Then\n        sOutput &= \"[\" & sKey.ToUpper & \"]\" & Space(iMaxKeyLength - sKey.Length + 1) & String.Join(\", \", sWords(sKey).ToArray()) & vbCrLf\n      End If\n    Next\n\n    Console.WriteLine(sOutput)\n    Console.ReadKey()\n\n  End Sub",
      "kind": 2,
      "metadata": {
        "id": 1,
        "type": "originalCode",
        "lineNumberBase": 6
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "application/vnd.code.notebook.error",
              "data": "Error: Boost Code Explanation failed: Boost Cloud Service could not be resolved. Please check your internet connection, and try again."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "vb",
      "id": "2",
      "value": "\n\n  Private Function SortCharacters(ByVal s As String) As String\n\n    Dim sReturn() As Char = s.ToCharArray()\n    Dim sTemp As Char = Nothing\n\n    For i As Integer = 0 To sReturn.GetUpperBound(0) - 1\n      If (sReturn(i + 1)) < (sReturn(i)) Then\n        sTemp = sReturn(i)\n        sReturn(i) = sReturn(i + 1)\n        sReturn(i + 1) = sTemp\n        i = -1\n      End If\n    Next\n\n    Return CStr(sReturn)\n\n  End Function\n\nEnd Module\n",
      "kind": 2,
      "metadata": {
        "id": 2,
        "type": "originalCode",
        "lineNumberBase": 6
      }
    }
  ],
  "metadata": {
    "defaultDir": ".boost",
    "sourceFile": "./src/test/resources/anagrams.vb"
  }
}