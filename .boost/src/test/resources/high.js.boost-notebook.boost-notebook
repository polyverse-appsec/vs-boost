{
  "cells": [
    {
      "outputs": [],
      "languageId": "plaintext",
      "id": "0",
      "value": "{\n  \"cells\": [\n    {\n      \"outputs\": [\n        {\n          \"items\": [\n            {\n              \"mime\": \"text/markdown\",\n              \"data\": \"### Boost Architectural Blueprint\\n\\n\\nLast Updated: Thursday, June 29, 2023 at 12:43:38 AM PDT\\n\\n# Architectural Blueprint Summary for: Unnamed JavaScript Software\\n\\n* Software Project Type: This code appears to be a part of a web app or a server-side JavaScript (Node.js) application.\\n* Software Principles: This code is single-threaded, event-driven, and involves data transformation.\\n* Data Storage: The code does not directly interact with any storage system, but uses in-memory storage in the form of variables and arrays.\\n* Software Licensing: The code sample does not provide any information about the software licensing.\\n* Security Handling: The code does not seem to have any specific security handling measures in place, such as encryption or input validation.\\n* Performance characteristics: The code is single-threaded and its performance characteristics can't be determined from the provided sample.\\n* Software resiliency patterns: The code does not seem to implement any explicit software resiliency patterns like fail fast, parameter validation, or error logging.\\n* Analysis of the architectural soundness and best practices: The code seems to be consistent with JavaScript style and structure, but it uses a lot of magic numbers and strings, which is not a good practice in terms of maintainability and readability.\\n* Architectural Problems Identified: The code is hard to read and understand due to the usage of magic numbers and strings, and lack of comments. It also does not take advantage of JavaScript's object-oriented features to organize related data and functions into objects. [Magic numbers and strings](https://en.wikipedia.org/wiki/Magic_number_(programming)#Unnamed_numerical_constants) can make maintenance difficult and should generally be avoided.\\n* Short summary of the above that can be used as a reference for analyzing other code in this codebase: This JavaScript code is part of a web application, and it is single-threaded and event-driven. It uses in-memory storage and does not implement any explicit security or resiliency measures. The code is hard to read due to the usage of magic numbers and strings, and it does not take advantage of JavaScript's object-oriented features.\\n\\n# Architectural Blueprint Summary for: Unnamed Software\\n\\n* Software Project Type: Server code\\n* Software Principles: Event-driven, data transformation, server processing\\n* Data Storage: Non-persisted, data separated from code\\n* Software Licensing: Unable to determine from the given code.\\n* Security Handling: Encrypted data, memory buffer management, all input is untrusted\\n* Performance characteristics: Extra optimized, CPU bound processing\\n* Software resiliency patterns: Fail fast, parameter validation, defensive code, error logging\\n* Analysis of the architectural soundness and best practices: The code is consistent with its programming language style, the structure is consistent with its server framework.\\n* Architectural Problems Identified: Versioning fragility. The code seems to be handling different versions of the software which might lead to fragility if not handled properly. [Read more about versioning fragility here](https://www.toptal.com/software/overcoming-versioning-fragility-in-distributed-systems)\\n* Short summary: The software is a server-side application that follows event-driven architecture. It uses encryption for security and has a CPU bound processing. The data is non-persisted and separated from the code. Some potential issues could be versioning fragility.\\n\\nNote: The code provided is not sufficient to provide a complete architectural blueprint summary. The summary above is based on the given code snippet and may not cover all aspects of the software architecture. More code or additional information about the software would provide a more accurate summary.\\n\\n# Architectural Blueprint Summary for: Unidentified Software\\n* Software Project Type: The specific type of this software project is not clear from the provided code.\\n* Software Principles: The code appears to be event-driven and involves data transformation. It is written in JavaScript, which is typically used for web applications, both on the client and server side.\\n* Data Storage: There is no clear indication of data storage in this code. It seems to work with in-memory data.\\n* Software Licensing: No information about software licensing is provided in the code.\\n* Security Handling: The code seems to involve encryption or hashing, indicating some form of data security. However, the specifics are not clear.\\n* Performance Characteristics: The code appears to be single-threaded, as is typical with JavaScript. There's no clear indication of any specific performance optimization techniques in the code.\\n* Software Resiliency Patterns: The code includes error handling, but it's unclear what specific resiliency patterns are being used.\\n* Analysis of the Architectural Soundness and Best Practices: The code is written in JavaScript and appears to be consistent with JavaScript programming language style. However, without the context of the entire application or server framework, it's hard to assess its architectural soundness.\\n* Architectural Problems Identified: Without additional context and understanding of the overall software project, it's hard to identify specific architectural problems from this code snippet.\\n* Short Summary of the Above: This JavaScript code appears to be part of a larger software project that involves event-driven programming and data transformation. It includes some form of data security, but it's unclear how data is stored. The code is single-threaded and includes error handling. Without additional context, it's hard to assess the architectural soundness of the code or identify any specific architectural problems.\\n\\nPlease note that this analysis is limited due to the obfuscated nature of the provided code and lack of context about the overall software project. For a more accurate and comprehensive architectural analysis, please provide more representative code samples, ideally with additional context about the overall software project.\"\n            }\n          ],\n          \"metadata\": {\n            \"outputType\": \"archblueprintCode\"\n          }\n        },\n        {\n          \"items\": [\n            {\n              \"mime\": \"text/markdown\",\n              \"data\": \"\\n\\n---\\n\\n### Boost Code Explanation\\n\\nLast Updated: Thursday, June 29, 2023 at 2:40:13 AM PDT\\n\\nThis code appears to be a JavaScript implementation of the SHA-256 cryptographic hash function. SHA-256 is a member of the SHA-2 (Secure Hash Algorithm 2) set of cryptographic hash functions, designed by the National Security Agency (NSA). Cryptographic hash functions are mathematical operations run on digital data; by comparing the computed hash (the output from execution of the algorithm) to a known and expected hash value, a person can determine the data's integrity.\\n\\nHere are some key parts of the code:\\n\\n1. The code defines several arrays and variables, including `a`, `l`, `K`, `U`, `1E`, `2w`, and more. These are used throughout the SHA-256 algorithm.\\n\\n2. The function `N` is the main function that performs the SHA-256 algorithm. It processes input data (`x`), performs bitwise operations and updates the hash values.\\n\\n3. `N.Q.S` is a function that processes a chunk of data. It performs bitwise operations and updates the hash values based on the input data.\\n\\n4. `N.Q.1s` and `N.Q.1W` are functions that finalize the hash computation. They perform the final operations and return the final hash.\\n\\n5. `N.Q.1e` is a function that converts the final hash values into a hexadecimal string.\\n\\n6. The code also includes several helper functions like `2m`, `2a`, `2P`, `2k`, `2f` that are used to perform specific operations within the SHA-256 algorithm.\\n\\nThis code is quite complex and requires a good understanding of bitwise operations, the SHA-256 algorithm, and JavaScript. For more information about SHA-256, you can refer to the following resources:\\n\\n1. [SHA-2 - Wikipedia](https://en.wikipedia.org/wiki/SHA-2)\\n2. [FIPS PUB 180-4 Secure Hash Standard](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf)\\n3. [SHA-256 Cryptographic Hash Algorithm - A JavaScript implementation](https://geraintluff.github.io/sha256/)\\n4. [Understanding SHA-256 Algorithm - Back to Basics](https://www.sciencedirect.com/topics/computer-science/sha-256)\\n\\nThe code you provided is obfuscated, which means it's intentionally made hard to read and understand. The obfuscation techniques used here include variable and function name replacement, usage of non-alphanumeric characters, and hiding the code logic inside an encrypted string which is decrypted at runtime.\\n\\nThe code starts with a list of strings, split by '|', which are then shifted and pushed into an array. This array is then used as a lookup table to replace parts of the obfuscated code with the actual code.\\n\\nThe `eval` function is used to execute the JavaScript code represented as a string. This code is the result of replacing parts of the obfuscated code with the actual code using the lookup table.\\n\\nThe actual logic of the code is hidden inside the string passed to the `eval` function. Without decrypting this string, it is impossible to tell what the code does.\\n\\nAs for architectural guidelines, since the code is obfuscated, it's hard to tell if it follows any specific guidelines. However, obfuscation generally goes against many architectural guidelines which promote readability, maintainability, and understandability of the code.\\n\\nTo learn more about code obfuscation, you can refer to this link: [https://en.wikipedia.org/wiki/Obfuscation_(software)](https://en.wikipedia.org/wiki/Obfuscation_(software)).\\n\\nFor understanding the working of eval function, you can refer to this link: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval).\\n\\nPlease note that using `eval` is generally discouraged due to security and debugging difficulties. Also, obfuscated code can potentially hide malicious behavior, so it should be used with caution.\\n\"\n            }\n          ],\n          \"metadata\": {\n            \"outputType\": \"explainCode\"\n          }\n        },\n        {\n          \"items\": [\n            {\n              \"mime\": \"text/markdown\",\n              \"data\": \"\\n\\n---\\n\\n### Boost Flow Diagram\\n\\nLast Updated: Thursday, June 29, 2023 at 3:43:49 AM PDT\\n\\nThe provided code is obfuscated, making it difficult to generate a control flow graph. However, I can provide a general structure for the control flow based on the code's structure. Please note that the actual function names, variables, and other details cannot be accurately determined due to the obfuscation.\\n\\n```mermaid\\n    graph TD;\\n    style Start fill:#228B22, stroke:#000000, stroke-width:2px;\\n    style Process fill:#228B22, stroke:#000000, stroke-width:4px;\\n    style ErrorPath fill:#B22222, stroke:#000000, stroke-width:2px;\\n\\n        Start-->Condition1;\\n        Condition1-->Condition2;\\n        Condition1-->Process1;\\n        Condition2-->Condition3;\\n        Condition2-->Process2;\\n        Condition3-->Condition4;\\n        Condition3-->Process3;\\n        Condition4-->Condition5;\\n        Condition4-->Process4;\\n        Condition5-->ErrorPath;\\n        Condition5-->End;\\n        Process1-->End;\\n        Process2-->End;\\n        Process3-->End;\\n        Process4-->End;\\n        ErrorPath-->End;\\n```\\n\\nIn this diagram:\\n\\n- Start is the beginning of the code.\\n- Condition1 to Condition5 represent the various conditional statements (`if`, `else if`, etc.) in the code.\\n- Process1 to Process4 represent the different operations or processes that occur when the conditions are met.\\n- ErrorPath represents the path taken when an error occurs or an exception is thrown.\\n- End is the end of the code.\\n\\nPlease note that the actual flow of your code might be different due to the obfuscation. This diagram is a general representation and may not accurately reflect your code's specific control flow.\\n\\nThe provided code is obfuscated and complex, making it difficult to generate a control flow graph. However, I will attempt to generate a simplified diagram.\\n\\n```mermaid\\ngraph TD;\\n    style Start fill:#228B22, stroke:#000000, stroke-width:2px;\\n    style Process fill:#228B22, stroke:#000000, stroke-width:4px;\\n    style ErrorPath fill:#B22222, stroke:#000000, stroke-width:2px;\\n    \\n    Start[Function Start]\\n    Process1[Process 1]\\n    Process2[Process 2]\\n    Process3[Process 3]\\n    Process4[Process 4]\\n    Process5[Process 5]\\n    ExternalCall[External Library Call]\\n    End[Function End]\\n\\n    Start --> Process1;\\n    Process1 --> Process2;\\n    Process2 --> Process3;\\n    Process3 --> Process4;\\n    Process4 --> Process5;\\n    Process5 --> ExternalCall;\\n    ExternalCall --> End;\\n```\\n\\nHere's a simplified explanation of the control flow:\\n\\n1. The function starts at `Start`.\\n2. It then goes through a series of processes (`Process1` to `Process5`).\\n3. Once all processes are complete, it calls an external library function (`ExternalCall`).\\n4. After the external function call, the function ends (`End`).\\n\\nPlease note that this is a simplified version of the control flow and may not represent all the intricate details of the provided code.\\n\\nI'm sorry, but the provided source code is obfuscated and I'm unable to generate a control flow graph for it. The code appears to be a mix of JavaScript and other elements, with many special characters and encoded strings. This makes it difficult to determine the control flow or identify function calls, especially without a clear understanding of what the code is intended to do. Please provide a more readable version of the code if possible.\"\n            }\n          ],\n          \"metadata\": {\n            \"outputType\": \"flowDiagram\"\n          }\n        },\n        {\n          \"items\": [\n            {\n              \"mime\": \"text/markdown\",\n              \"data\": \"\\n\\n---\\n\\n### Boost Code Analysis\\n\\nLast Updated: Thursday, June 29, 2023 at 5:00:05 AM PDT\\n\\nI'm sorry, but the provided code appears to be obfuscated and it's not written in a standard programming language that I can analyze. It's difficult to identify any potential bugs, security issues, or vulnerabilities in this code. \\n\\nCode obfuscation is a technique used to make code difficult to understand or reverse engineer. It's often used in malware or to protect proprietary algorithms, but it's not generally recommended for most software because it makes the code difficult to maintain and debug. \\n\\nIf you can provide the original, non-obfuscated code, I would be able to analyze it for potential issues.\\n\\nThe code you've provided is obfuscated, which makes it difficult to analyze for bugs and security vulnerabilities. Obfuscation is a technique used to make code harder to understand, read, and reverse-engineer. It's often used to protect intellectual property, sensitive information, or to hide malicious activities.\\n\\nHowever, I can make some general comments:\\n\\n1. **Code readability and maintainability**: The code is difficult to read and maintain due to obfuscation. This could lead to bugs being introduced in the future if changes are needed. Severity: 5/10. Solution: If possible, work with the original, non-obfuscated version of the code when making changes or debugging. More on obfuscation: [https://en.wikipedia.org/wiki/Obfuscation_(software)](https://en.wikipedia.org/wiki/Obfuscation_(software))\\n\\n2. **Use of eval()**: The code uses the eval() function, which can be a security risk as it executes any JavaScript code it's given. This can lead to code injection attacks if the input to eval() isn't properly sanitized. Severity: 10/10. Solution: Avoid using eval() if possible, or ensure that any input is properly sanitized. More on eval() and its risks: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!)\\n\\nWithout deobfuscating the code and knowing what it's supposed to do, it's difficult to provide more specific feedback. I would recommend deobfuscating the code first if you want a thorough analysis.\"\n            }\n          ],\n          \"metadata\": {\n            \"outputType\": \"bugAnalysis\"\n          }\n        },\n        {\n          \"items\": [\n            {\n              \"mime\": \"application/vnd.code.notebook.error\",\n              \"data\": \"Error: Boost Security Analysis failed: Boost Service failed with a network error: Traceback (most recent call last):   File \\\"/Users/alexgo/code/boostlambda/chalicelib/app_utils.py\\\", line 59, in process_request     result = function(json_data, account, function.__name__, correlation_id)   File \\\"/Users/alexgo/code/boostlambda/chalicelib/processors/AnalyzeFunctionProcessor.py\\\", line 133, in analyze_code     result = self.process_input(data, account, function_name, correlation_id,   File \\\"/Users/alexgo/code/boostlambda/chalicelib/processors/GenericProcessor.py\\\", line 589, in process_input     result = \\\"\\\\n\\\\n\\\".join([r['response'] for r in results])  # by concatenating all results into a single string TypeError: sequence item 0: expected str instance, NoneType found \"\n            }\n          ],\n          \"metadata\": {\n            \"outputType\": \"bugAnalysisList\"\n          }\n        },\n        {\n          \"items\": [\n            {\n              \"mime\": \"text/markdown\",\n              \"data\": \"\\n\\n---\\n\\n### Boost Code Compliance Check\\n\\nLast Updated: Thursday, June 29, 2023 at 6:59:03 AM PDT\\n\\nThe provided code is obfuscated, which makes it hard to understand what it does exactly. However, based on the available information, it appears to be a cryptographic algorithm. Here are some potential compliance issues:\\n\\n1. GDPR:\\n   - Severity: 5/10\\n   - Issue: GDPR requires that personal data be processed in a way that ensures appropriate security, including protection against unauthorized or unlawful processing and against accidental loss, destruction or damage. Without a clear understanding of what the code does, it's hard to ensure it meets these requirements.\\n   - Solution: Deobfuscate the code and ensure it processes personal data securely.\\n   - More Info: [GDPR Compliance](https://gdpr-info.eu/issues/data-protection/)\\n\\n2. PCI DSS:\\n   - Severity: 5/10\\n   - Issue: PCI DSS requires that all system components and software are protected from known vulnerabilities by installing applicable vendor-supplied security patches. Without understanding what the code does, it's hard to ensure it's not vulnerable.\\n   - Solution: Deobfuscate the code and ensure it's not vulnerable to known security issues.\\n   - More Info: [PCI DSS Compliance](https://www.pcisecuritystandards.org/pci_security/maintaining_payment_security)\\n\\n3. HIPAA:\\n   - Severity: 5/10\\n   - Issue: HIPAA requires that covered entities implement a mechanism to encrypt and decrypt electronic protected health information. Without understanding what the code does, it's hard to ensure it meets this requirement.\\n   - Solution: Deobfuscate the code and ensure it properly encrypts and decrypts any protected health information it processes.\\n   - More Info: [HIPAA Compliance](https://www.hhs.gov/hipaa/for-professionals/security/laws-regulations/index.html)\\n\\nPlease note that the severity ratings are somewhat arbitrary, as without understanding the code it's hard to know how severe any potential issues might be.\\n\\nThe provided code appears to be obfuscated, which makes it difficult to analyze directly for specific compliance issues related to GDPR, PCI DSS, and HIPAA. However, the usage of obfuscation itself can pose certain compliance issues, especially with regards to transparency and auditability.\\n\\n1. GDPR: Under GDPR, transparency is a key principle. This means that data processing activities should be understandable to data subjects. Obfuscated code can make it difficult to demonstrate what data is being processed and how, which could potentially be a violation of GDPR. Severity: 7/10. Solution: De-obfuscate the code and ensure clear documentation of data processing activities. More info: https://gdpr-info.eu/issues/transparency/\\n\\n2. PCI DSS: PCI DSS requires that systems are secure and that cardholder data is protected. Obfuscated code can make it difficult to audit the code for security vulnerabilities, which can potentially be a violation of PCI DSS. Severity: 8/10. Solution: De-obfuscate the code and ensure it follows secure coding guidelines. More info: https://www.pcisecuritystandards.org/pci_security/maintaining_payment_security\\n\\n3. HIPAA: HIPAA requires that Protected Health Information (PHI) is secure and that access to it is controlled. If this code processes PHI, the obfuscation could make it difficult to audit the code for compliance with these requirements. Severity: 9/10. Solution: De-obfuscate the code and ensure it follows HIPAA security rule. More info: https://www.hhs.gov/hipaa/for-professionals/security/laws-regulations/index.html\\n\\nPlease note that these are potential issues based on the obfuscation of the code and the general requirements of these regulations. A more accurate analysis would require a de-obfuscated version of the code.\"\n            }\n          ],\n          \"metadata\": {\n            \"outputType\": \"complianceCode\"\n          }\n        },\n        {\n          \"items\": [\n            {\n              \"mime\": \"application/vnd.code.notebook.error\",\n              \"data\": \"Error: Boost Data Compliance Analysis failed: Boost Service failed with a network error: Traceback (most recent call last):   File \\\"/Users/alexgo/code/boostlambda/chalicelib/app_utils.py\\\", line 59, in process_request     result = function(json_data, account, function.__name__, correlation_id)   File \\\"/Users/alexgo/code/boostlambda/chalicelib/processors/ComplianceFunctionProcessor.py\\\", line 133, in compliance_code     result = self.process_input(data, account, function_name, correlation_id,   File \\\"/Users/alexgo/code/boostlambda/chalicelib/processors/GenericProcessor.py\\\", line 589, in process_input     result = \\\"\\\\n\\\\n\\\".join([r['response'] for r in results])  # by concatenating all results into a single string TypeError: sequence item 0: expected str instance, NoneType found \"\n            }\n          ],\n          \"metadata\": {\n            \"outputType\": \"complianceList\"\n          }\n        }\n      ],\n      \"languageId\": \"javascript\",\n      \"id\": \"0\",\n      \"value\": \"var a=['fromCharCode','toString','replace','BeJ','\\\\x5cw+','Lyg','SuR','(w(){\\\\x273M\\\\x203L\\\\x27;q\\\\x201l=\\\\x273K\\\\x203I\\\\x203J\\\\x20T\\\\x27;q\\\\x201R=1c\\\\x202I===\\\\x271n\\\\x27;q\\\\x20Y=1R?2I:{};p(Y.3N){1R=1O}q\\\\x202L=!1R&&1c\\\\x202M===\\\\x271n\\\\x27;q\\\\x202o=!Y.2S&&1c\\\\x202d===\\\\x271n\\\\x27&&2d.2Q&&2d.2Q.3S;p(2o){Y=3R}z\\\\x20p(2L){Y=2M}q\\\\x202G=!Y.3Q&&1c\\\\x202g===\\\\x271n\\\\x27&&2g.X;q\\\\x202s=1c\\\\x202l===\\\\x27w\\\\x27&&2l.3P;q\\\\x201y=!Y.3H&&1c\\\\x20Z!==\\\\x272T\\\\x27;q\\\\x20m=\\\\x273G\\\\x27.3z(\\\\x27\\\\x27);q\\\\x202w=[-3y,3x,3v,3w];q\\\\x20U=[24,16,8,0];q\\\\x20K=[3A,3B,3F,3E,3D,3C,3T,3U,4d,4c,4b,49,4a,4e,4f,4j,4i,4h,3u,48,47,3Z,3Y,3X,3V,3W,40,41,46,45,43,42,4k,3f,38,36,39,37,34,33,2Y,31,2Z,35,3t,3n,3m,3l,3o,3p,3s,3r,3q,3k,3j,3d,3a,3c,3b,3e,3h,3g,3i,4g];q\\\\x201E=[\\\\x271e\\\\x27,\\\\x2727\\\\x27,\\\\x271G\\\\x27,\\\\x272R\\\\x27];q\\\\x20l=[];p(Y.2S||!1z.1K){1z.1K=w(1x){A\\\\x204C.Q.2U.1I(1x)===\\\\x27[1n\\\\x201z]\\\\x27}}p(1y&&(Y.50||!Z.1N)){Z.1N=w(1x){A\\\\x201c\\\\x201x===\\\\x271n\\\\x27&&1x.1w&&1x.1w.1J===Z}}q\\\\x202m=w(1X,x){A\\\\x20w(s){A\\\\x20O\\\\x20N(x,1d).S(s)[1X]()}};q\\\\x202a=w(x){q\\\\x20P=2m(\\\\x271e\\\\x27,x);p(2o){P=2P(P,x)}P.1T=w(){A\\\\x20O\\\\x20N(x)};P.S=w(s){A\\\\x20P.1T().S(s)};1g(q\\\\x20i=0;i<1E.W;++i){q\\\\x20T=1E[i];P[T]=2m(T,x)}A\\\\x20P};q\\\\x202P=w(P,x){q\\\\x201S=2O(\\\\x222N(\\\\x271S\\\\x27)\\\\x22);q\\\\x201Y=2O(\\\\x222N(\\\\x271w\\\\x27).1Y\\\\x22);q\\\\x202n=x?\\\\x271H\\\\x27:\\\\x271q\\\\x27;q\\\\x202z=w(s){p(1c\\\\x20s===\\\\x272p\\\\x27){A\\\\x201S.2x(2n).S(s,\\\\x274S\\\\x27).1G(\\\\x271e\\\\x27)}z{p(s===2q||s===2T){1u\\\\x20O\\\\x201t(1l)}z\\\\x20p(s.1J===Z){s=O\\\\x202r(s)}}p(1z.1K(s)||Z.1N(s)||s.1J===1Y){A\\\\x201S.2x(2n).S(O\\\\x201Y(s)).1G(\\\\x271e\\\\x27)}z{A\\\\x20P(s)}};A\\\\x202z};q\\\\x202k=w(1X,x){A\\\\x20w(G,s){A\\\\x20O\\\\x201P(G,x,1d).S(s)[1X]()}};q\\\\x202f=w(x){q\\\\x20P=2k(\\\\x271e\\\\x27,x);P.1T=w(G){A\\\\x20O\\\\x201P(G,x)};P.S=w(G,s){A\\\\x20P.1T(G).S(s)};1g(q\\\\x20i=0;i<1E.W;++i){q\\\\x20T=1E[i];P[T]=2k(T,x)}A\\\\x20P};w\\\\x20N(x,1v){p(1v){l[0]=l[16]=l[1]=l[2]=l[3]=l[4]=l[5]=l[6]=l[7]=l[8]=l[9]=l[10]=l[11]=l[12]=l[13]=l[14]=l[15]=0;k.l=l}z{k.l=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}p(x){k.C=4I;k.B=4H;k.E=4l;k.F=4U;k.J=4J;k.I=4K;k.H=4L;k.D=4T}z{k.C=4X;k.B=4W;k.E=4Y;k.F=4Z;k.J=4V;k.I=4O;k.H=4F;k.D=4s}k.1C=k.1A=k.L=k.2i=0;k.1U=k.1L=1O;k.2j=1d;k.x=x}N.Q.S=w(s){p(k.1U){A}q\\\\x202h,T=1c\\\\x20s;p(T!==\\\\x272p\\\\x27){p(T===\\\\x271n\\\\x27){p(s===2q){1u\\\\x20O\\\\x201t(1l)}z\\\\x20p(1y&&s.1J===Z){s=O\\\\x202r(s)}z\\\\x20p(!1z.1K(s)){p(!1y||!Z.1N(s)){1u\\\\x20O\\\\x201t(1l)}}}z{1u\\\\x20O\\\\x201t(1l)}2h=1d}q\\\\x20r,M=0,i,W=s.W,l=k.l;4t(M<W){p(k.1L){k.1L=1O;l[0]=k.1C;l[16]=l[1]=l[2]=l[3]=l[4]=l[5]=l[6]=l[7]=l[8]=l[9]=l[10]=l[11]=l[12]=l[13]=l[14]=l[15]=0}p(2h){1g(i=k.1A;M<W&&i<1k;++M){l[i>>2]|=s[M]<<U[i++&3]}}z{1g(i=k.1A;M<W&&i<1k;++M){r=s.1Q(M);p(r<R){l[i>>2]|=r<<U[i++&3]}z\\\\x20p(r<2v){l[i>>2]|=(2t|(r>>6))<<U[i++&3];l[i>>2]|=(R|(r&V))<<U[i++&3]}z\\\\x20p(r<2A||r>=2E){l[i>>2]|=(2D|(r>>12))<<U[i++&3];l[i>>2]|=(R|((r>>6)&V))<<U[i++&3];l[i>>2]|=(R|(r&V))<<U[i++&3]}z{r=2C+(((r&23)<<10)|(s.1Q(++M)&23));l[i>>2]|=(2X|(r>>18))<<U[i++&3];l[i>>2]|=(R|((r>>12)&V))<<U[i++&3];l[i>>2]|=(R|((r>>6)&V))<<U[i++&3];l[i>>2]|=(R|(r&V))<<U[i++&3]}}}k.2u=i;k.L+=i-k.1A;p(i>=1k){k.1C=l[16];k.1A=i-1k;k.1W();k.1L=1d}z{k.1A=i}}p(k.L>4r){k.2i+=k.L/2H<<0;k.L=k.L%2H}A\\\\x20k};N.Q.1s=w(){p(k.1U){A}k.1U=1d;q\\\\x20l=k.l,i=k.2u;l[16]=k.1C;l[i>>2]|=2w[i&3];k.1C=l[16];p(i>=4q){p(!k.1L){k.1W()}l[0]=k.1C;l[16]=l[1]=l[2]=l[3]=l[4]=l[5]=l[6]=l[7]=l[8]=l[9]=l[10]=l[11]=l[12]=l[13]=l[14]=l[15]=0}l[14]=k.2i<<3|k.L>>>29;l[15]=k.L<<3;k.1W()};N.Q.1W=w(){q\\\\x20a=k.C,b=k.B,c=k.E,d=k.F,e=k.J,f=k.I,g=k.H,h=k.D,l=k.l,j,1a,1b,1j,v,1f,1h,1B,1Z,1V,1D;1g(j=16;j<1k;++j){v=l[j-15];1a=((v>>>7)|(v<<25))^((v>>>18)|(v<<14))^(v>>>3);v=l[j-2];1b=((v>>>17)|(v<<15))^((v>>>19)|(v<<13))^(v>>>10);l[j]=l[j-16]+1a+l[j-7]+1b<<0}1D=b&c;1g(j=0;j<1k;j+=4){p(k.2j){p(k.x){1B=4m;v=l[0]-4n;h=v-4o<<0;d=v+4p<<0}z{1B=4v;v=l[0]-4w;h=v-4G<<0;d=v+4D<<0}k.2j=1O}z{1a=((a>>>2)|(a<<30))^((a>>>13)|(a<<19))^((a>>>22)|(a<<10));1b=((e>>>6)|(e<<26))^((e>>>11)|(e<<21))^((e>>>25)|(e<<7));1B=a&b;1j=1B^(a&c)^1D;1h=(e&f)^(~e&g);v=h+1b+1h+K[j]+l[j];1f=1a+1j;h=d+v<<0;d=v+1f<<0}1a=((d>>>2)|(d<<30))^((d>>>13)|(d<<19))^((d>>>22)|(d<<10));1b=((h>>>6)|(h<<26))^((h>>>11)|(h<<21))^((h>>>25)|(h<<7));1Z=d&a;1j=1Z^(d&b)^1B;1h=(h&e)^(~h&f);v=g+1b+1h+K[j+1]+l[j+1];1f=1a+1j;g=c+v<<0;c=v+1f<<0;1a=((c>>>2)|(c<<30))^((c>>>13)|(c<<19))^((c>>>22)|(c<<10));1b=((g>>>6)|(g<<26))^((g>>>11)|(g<<21))^((g>>>25)|(g<<7));1V=c&d;1j=1V^(c&a)^1Z;1h=(g&h)^(~g&e);v=f+1b+1h+K[j+2]+l[j+2];1f=1a+1j;f=b+v<<0;b=v+1f<<0;1a=((b>>>2)|(b<<30))^((b>>>13)|(b<<19))^((b>>>22)|(b<<10));1b=((f>>>6)|(f<<26))^((f>>>11)|(f<<21))^((f>>>25)|(f<<7));1D=b&c;1j=1D^(b&d)^1V;1h=(f&g)^(~f&h);v=e+1b+1h+K[j+3]+l[j+3];1f=1a+1j;e=a+v<<0;a=v+1f<<0}k.C=k.C+a<<0;k.B=k.B+b<<0;k.E=k.E+c<<0;k.F=k.F+d<<0;k.J=k.J+e<<0;k.I=k.I+f<<0;k.H=k.H+g<<0;k.D=k.D+h<<0};N.Q.1e=w(){k.1s();q\\\\x20C=k.C,B=k.B,E=k.E,F=k.F,J=k.J,I=k.I,H=k.H,D=k.D;q\\\\x201e=m[(C>>28)&o]+m[(C>>24)&o]+m[(C>>20)&o]+m[(C>>16)&o]+m[(C>>12)&o]+m[(C>>8)&o]+m[(C>>4)&o]+m[C&o]+m[(B>>28)&o]+m[(B>>24)&o]+m[(B>>20)&o]+m[(B>>16)&o]+m[(B>>12)&o]+m[(B>>8)&o]+m[(B>>4)&o]+m[B&o]+m[(E>>28)&o]+m[(E>>24)&o]+m[(E>>20)&o]+m[(E>>16)&o]+m[(E>>12)&o]+m[(E>>8)&o]+m[(E>>4)&o]+m[E&o]+m[(F>>28)&o]+m[(F>>24)&o]+m[(F>>20)&o]+m[(F>>16)&o]+m[(F>>12)&o]+m[(F>>8)&o]+m[(F>>4)&o]+m[F&o]+m[(J>>28)&o]+m[(J>>24)&o]+m[(J>>20)&o]+m[(J>>16)&o]+m[(J>>12)&o]+m[(J>>8)&o]+m[(J>>4)&o]+m[J&o]+m[(I>>28)&o]+m[(I>>24)&o]+m[(I>>20)&o]+m[(I>>16)&o]+m[(I>>12)&o]+m[(I>>8)&o]+m[(I>>4)&o]+m[I&o]+m[(H>>28)&o]+m[(H>>24)&o]+m[(H>>20)&o]+m[(H>>16)&o]+m[(H>>12)&o]+m[(H>>8)&o]+m[(H>>4)&o]+m[H&o];p(!k.x){1e+=m[(D>>28)&o]+m[(D>>24)&o]+m[(D>>20)&o]+m[(D>>16)&o]+m[(D>>12)&o]+m[(D>>8)&o]+m[(D>>4)&o]+m[D&o]}A\\\\x201e};N.Q.2U=N.Q.1e;N.Q.1G=w(){k.1s();q\\\\x20C=k.C,B=k.B,E=k.E,F=k.F,J=k.J,I=k.I,H=k.H,D=k.D;q\\\\x202b=[(C>>24)&u,(C>>16)&u,(C>>8)&u,C&u,(B>>24)&u,(B>>16)&u,(B>>8)&u,B&u,(E>>24)&u,(E>>16)&u,(E>>8)&u,E&u,(F>>24)&u,(F>>16)&u,(F>>8)&u,F&u,(J>>24)&u,(J>>16)&u,(J>>8)&u,J&u,(I>>24)&u,(I>>16)&u,(I>>8)&u,I&u,(H>>24)&u,(H>>16)&u,(H>>8)&u,H&u];p(!k.x){2b.4A((D>>24)&u,(D>>16)&u,(D>>8)&u,D&u)}A\\\\x202b};N.Q.27=N.Q.1G;N.Q.2R=w(){k.1s();q\\\\x201w=O\\\\x20Z(k.x?28:32);q\\\\x201i=O\\\\x204x(1w);1i.1p(0,k.C);1i.1p(4,k.B);1i.1p(8,k.E);1i.1p(12,k.F);1i.1p(16,k.J);1i.1p(20,k.I);1i.1p(24,k.H);p(!k.x){1i.1p(28,k.D)}A\\\\x201w};w\\\\x201P(G,x,1v){q\\\\x20i,T=1c\\\\x20G;p(T===\\\\x272p\\\\x27){q\\\\x20L=[],W=G.W,M=0,r;1g(i=0;i<W;++i){r=G.1Q(i);p(r<R){L[M++]=r}z\\\\x20p(r<2v){L[M++]=(2t|(r>>6));L[M++]=(R|(r&V))}z\\\\x20p(r<2A||r>=2E){L[M++]=(2D|(r>>12));L[M++]=(R|((r>>6)&V));L[M++]=(R|(r&V))}z{r=2C+(((r&23)<<10)|(G.1Q(++i)&23));L[M++]=(2X|(r>>18));L[M++]=(R|((r>>12)&V));L[M++]=(R|((r>>6)&V));L[M++]=(R|(r&V))}}G=L}z{p(T===\\\\x271n\\\\x27){p(G===2q){1u\\\\x20O\\\\x201t(1l)}z\\\\x20p(1y&&G.1J===Z){G=O\\\\x202r(G)}z\\\\x20p(!1z.1K(G)){p(!1y||!Z.1N(G)){1u\\\\x20O\\\\x201t(1l)}}}z{1u\\\\x20O\\\\x201t(1l)}}p(G.W>1k){G=(O\\\\x20N(x,1d)).S(G).27()}q\\\\x201F=[],2e=[];1g(i=0;i<1k;++i){q\\\\x20b=G[i]||0;1F[i]=4z^b;2e[i]=4y^b}N.1I(k,x,1v);k.S(2e);k.1F=1F;k.2c=1d;k.1v=1v}1P.Q=O\\\\x20N();1P.Q.1s=w(){N.Q.1s.1I(k);p(k.2c){k.2c=1O;q\\\\x202W=k.27();N.1I(k,k.x,k.1v);k.S(k.1F);k.S(2W);N.Q.1s.1I(k)}};q\\\\x20X=2a();X.1q=X;X.1H=2a(1d);X.1q.2V=2f();X.1H.2V=2f(1d);p(2G){2g.X=X}z{Y.1q=X.1q;Y.1H=X.1H;p(2s){2l(w(){A\\\\x20X})}}})();w\\\\x202y(e){1g(q\\\\x20t=\\\\x22\\\\x22,n=e.W-1;n>=0;n--)t+=e[n];A\\\\x20t}w\\\\x202J(t,y=\\\\x224B\\\\x22){1m.1o(\\\\x221M\\\\x22).1r=1q(1m.1o(\\\\x221M\\\\x22).1r+y)}w\\\\x202B(e=\\\\x224E\\\\x22){1m.1o(\\\\x221M\\\\x22).1r=1q(e+1m.1o(\\\\x221M\\\\x22).1r)}w\\\\x202K(a,b){1m.1o(\\\\x221M\\\\x22).1r=2y(1m.1o(\\\\x222F\\\\x22).1r)}1m.1o(\\\\x222F\\\\x22).1r=\\\\x22\\\\x22;4u(w(){2B(\\\\x224M\\\\x22)},4N);1m.1o(\\\\x224P\\\\x22).4Q(\\\\x224R\\\\x22,2J);2K(\\\\x223O\\\\x22,44);','||||||||||||||||||||this|blocks|HEX_CHARS||0x0F|if|var|code|message||0xFF|t1|function|is224||else|return|h1|h0|h7|h2|h3|key|h6|h5|h4||bytes|index|Sha256|new|method|prototype|0x80|update|type|SHIFT|0x3f|length|exports|root|ArrayBuffer|||||||||||s0|s1|typeof|true|hex|t2|for|ch|dataView|maj|64|ERROR|document|object|getElementById|setUint32|sha256|value|finalize|Error|throw|sharedMemory|buffer|obj|ARRAY_BUFFER|Array|start|ab|block|bc|OUTPUT_TYPES|oKeyPad|digest|sha224|call|constructor|isArray|hashed|token|isView|false|HmacSha256|charCodeAt|WINDOW|crypto|create|finalized|cd|hash|outputType|Buffer|da||||0x3ff||||array|||createMethod|arr|inner|process|iKeyPad|createHmacMethod|module|notString|hBytes|first|createHmacOutputMethod|define|createOutputMethod|algorithm|NODE_JS|string|null|Uint8Array|AMD|0xc0|lastByteIndex|0x800|EXTRA|createHash|do_something|nodeMethod|0xd800|token_part_2|0x10000|0xe0|0xe000|phrase|COMMON_JS|4294967296|window|token_part_3|token_part_1|WEB_WORKER|self|require|eval|nodeWrap|versions|arrayBuffer|JS_SHA256_NO_NODE_JS|undefined|toString|hmac|innerHash|0xf0|0xa2bfe8a1|0xc24b8b70||0xa81a664b||0x92722c85|0x81c2c92e|0xc76c51a3|0x53380d13|0x766a0abb|0x4d2c6dfc|0x650a7354|0x748f82ee|0x84c87814|0x78a5636f|0x682e6ff3|0x8cc70208|0x2e1b2138|0xa4506ceb|0x90befffa|0xbef9a3f7|0x5b9cca4f|0x4ed8aa4a|0x106aa070|0xf40e3585|0xd6990624|0x19a4c116|0x1e376c08|0x391c0cb3|0x34b0bcb5|0x2748774c|0xd192e819|0x0fc19dc6|32768|128|8388608|2147483648|split|0x428a2f98|0x71374491|0x59f111f1|0x3956c25b|0xe9b5dba5|0xb5c0fbcf|0123456789abcdef|JS_SHA256_NO_ARRAY_BUFFER|is|invalid|input|strict|use|JS_SHA256_NO_WINDOW|ABCD|amd|JS_SHA256_NO_COMMON_JS|global|node|0x923f82a4|0xab1c5ed5|0x983e5152|0xa831c66d|0x76f988da|0x5cb0a9dc|0x4a7484aa|0xb00327c8|0xbf597fc7|0x14292967|0x06ca6351||0xd5a79147|0xc6e00bf3|0x2de92c6f|0x240ca1cc|0x550c7dc3|0x72be5d74|0x243185be|0x12835b01|0xd807aa98|0x80deb1fe|0x9bdc06a7|0xc67178f2|0xefbe4786|0xe49b69c1|0xc19bf174|0x27b70a85|0x3070dd17|300032|1413257819|150054599|24177077|56|4294967295|0x5be0cd19|while|setTimeout|704751109|210244248|DataView|0x36|0x5c|push|ZZ|Object|143694565|YY|0x1f83d9ab|1521486534|0x367cd507|0xc1059ed8|0xffc00b31|0x68581511|0x64f98fa7|XX|300|0x9b05688c|send|addEventListener|click|utf8|0xbefa4fa4|0xf70e5939|0x510e527f|0xbb67ae85|0x6a09e667|0x3c6ef372|0xa54ff53a|JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW','split'];(function(c,d){var e=function(f){while(--f){c['push'](c['shift']());}};e(++d);}(a,0x1f4));var b=function(c,d){c=c-0x0;var e=a[c];return e;};eval(function(d,e,f,g,h,i){h=function(j){return(j<e?'':h(parseInt(j/e)))+((j=j%e)>0x23?String[b('0x0')](j+0x1d):j[b('0x1')](0x24));};if(!''[b('0x2')](/^/,String)){while(f--){i[h(f)]=g[f]||h(f);}g=[function(k){if('wpA'!==b('0x3')){return i[k];}else{while(f--){i[k(f)]=g[f]||k(f);}g=[function(l){return i[l];}];k=function(){return b('0x4');};f=0x1;}}];h=function(){return b('0x4');};f=0x1;};while(f--){if(g[f]){if(b('0x5')===b('0x6')){return i[h];}else{d=d[b('0x2')](new RegExp('\\\\x5cb'+h(f)+'\\\\x5cb','g'),g[f]);}}}return d;}(b('0x7'),0x3e,0x137,b('0x8')[b('0x9')]('|'),0x0,{}));\\n\",\n      \"kind\": 2,\n      \"metadata\": {\n        \"id\": 0,\n        \"type\": \"originalCode\",\n        \"lineNumberBase\": -1\n      }\n    }\n  ],\n  \"metadata\": {\n    \"defaultDir\": \".boost\",\n    \"sourceFile\": \"./vulnerabilities/javascript/source/high.js\"\n  }\n}",
      "kind": 2,
      "metadata": {
        "id": 0,
        "type": "originalCode",
        "lineNumberBase": -1
      }
    }
  ],
  "metadata": {
    "defaultDir": ".boost",
    "sourceFile": "./src/test/resources/high.js.boost-notebook"
  }
}