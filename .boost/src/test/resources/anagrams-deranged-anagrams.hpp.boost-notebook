{
  "cells": [
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "application/vnd.code.notebook.error",
              "data": "Error: Boost Code Explanation failed: Boost Cloud Service could not be resolved. Please check your internet connection, and try again."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "cpp",
      "id": "0",
      "value": "// Importing required libraries\n#include <algorithm> // for sorting strings\n#include <fstream> // for file input/output operations\n#include <functional> // for std::plus and std::equal_to\n#include <iostream> // for standard input/output\n#include <map> // for associative container map\n#include <numeric> // for inner_product\n#include <set> // for sorted container set\n#include <string> // for string operations\n\n// Check if two given strings are deranged or not\nbool is_deranged(const std::string& left, const std::string& right);\n\n// Main function of the program\nint main();\n\n// A struct containing the longest pair of deranged words and their length\nstruct LongestPair {\n    ResultPair pair;\n    size_t length;\n};\n",
      "kind": 2,
      "metadata": {
        "id": 0,
        "type": "originalCode",
        "lineNumberBase": 16
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "application/vnd.code.notebook.error",
              "data": "Error: Boost Code Explanation failed: Boost Cloud Service could not be resolved. Please check your internet connection, and try again."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "cpp",
      "id": "1",
      "value": "\n// Types declarations\n\n// A set containing string words\ntypedef std::string WordList;\n\n// A map of strings with corresponding set of strings\ntypedef std::map<std::string, WordList> AnagraMap;\n\n// A pair of strings containing two strings from input file\ntypedef std::pair<std::string, std::string> ResultPair;\n\n",
      "kind": 2,
      "metadata": {
        "id": 1,
        "type": "originalCode",
        "lineNumberBase": 16
      }
    }
  ],
  "metadata": {
    "defaultDir": ".boost",
    "sourceFile": "./src/test/resources/anagrams-deranged-anagrams.hpp"
  }
}