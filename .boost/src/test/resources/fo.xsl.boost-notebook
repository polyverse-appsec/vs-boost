{
  "cells": [
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 3:02:11 PM PDT\n\nThis code is written in XSLT (Extensible Stylesheet Language Transformations), a language for transforming XML documents into other XML documents, or other formats such as HTML for web pages, plain text, or into XSL Formatting Objects which may subsequently be converted to other formats, such as PDF, PostScript and PNG.\n\nThe code is part of the XSL DocBook Stylesheet distribution, which is a set of stylesheets for use with an XML-based publishing system called DocBook. These stylesheets are used to convert DocBook documents into other formats like HTML or PDF.\n\nHere's a breakdown of the code:\n\n1. The stylesheet declares several namespaces (xmlns) that are used in the code, including one for XSL Transformations (xsl), one for DocBook (d), and one for XSL Formatting Objects (fo).\n\n2. The code then defines several parameters (xsl:param) which are essentially variables that can be passed into the stylesheet. These parameters are used to set the alignment and writing mode based on the document's language direction (left-to-right, right-to-left, or top-to-bottom). For example, the \"direction.align.start\" parameter is set to \"left\" if the document is written in a left-to-right language, \"right\" if it's written in a right-to-left language, and \"top\" if it's written in a top-to-bottom language.\n\n3. The code also includes a warning message if the document is written in a right-to-left language but the FOP (Formatting Objects Processor) used does not support right-to-left writing mode.\n\n4. The \"anchor\" template is used to set the ID attribute of an XML element. The ID is generated using the \"object.id\" template and the current node as input.\n\n5. The \"dingbat\" template is used to set a symbol based on the \"dingbat\" parameter. The symbol can be a bullet, copyright symbol, trademark symbol, registered symbol, service mark, quotation marks, or dashes.\n\n6. If the \"dingbat.fontset\" parameter is not empty, the symbol is wrapped in an \"fo:inline\" element with the font-family attribute set to the value of the \"dingbat.fontset\" parameter. This allows to use a specific font for the symbol.\n\nHere are some references for further learning:\n\n1. [XSLT](https://www.w3schools.com/xml/xsl_intro.asp) - a tutorial on XSLT from W3Schools.\n2. [DocBook](https://docbook.org/) - the official website of DocBook.\n3. [XSL-FO](https://www.w3schools.com/xml/xml_xslfo.asp) - a tutorial on XSL-FO from W3Schools.\n4. [Apache FOP](https://xmlgraphics.apache.org/fop/) - the official website of Apache FOP, an XSL-FO processor.\n5. [XSLT Parameters and Variables](https://www.w3schools.com/xml/ref_xsl_el_param.asp) - a reference on XSLT parameters and variables from W3Schools."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "xml",
      "id": "0",
      "value": "<?xml version='1.0'?>\n<xsl:stylesheet exclude-result-prefixes=\"d\"\n                xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n                xmlns:d=\"http://docbook.org/ns/docbook\"\n\t\txmlns:fo=\"http://www.w3.org/1999/XSL/Format\"\n                version='1.0'>\n\n<!-- ********************************************************************\n\n     This file is part of the XSL DocBook Stylesheet distribution.\n     See ../README or https://cdn.docbook.org/release/xsl/current/ for\n     copyright and other information.\n\n     ******************************************************************** -->\n\n<!-- These variables set the margin-left or -right attribute value for FO output based on\n     the writing-mode specified in the gentext file for the document's lang. -->\n\n<xsl:param name=\"direction.align.start\">\n  <xsl:choose>\n    <!-- FOP does not support writing-mode=\"rl-tb\" -->\n    <xsl:when test=\"$fop.extensions != 0\">left</xsl:when>\n    <xsl:when test=\"$fop1.extensions != 0\">left</xsl:when>\n    <xsl:when test=\"starts-with($writing.mode, 'lr')\">left</xsl:when>\n    <xsl:when test=\"starts-with($writing.mode, 'rl')\">right</xsl:when>\n    <xsl:when test=\"starts-with($writing.mode, 'tb')\">top</xsl:when>\n    <xsl:otherwise>left</xsl:otherwise>\n  </xsl:choose>\n</xsl:param>\n\n<xsl:param name=\"direction.align.end\">\n  <xsl:choose>\n    <xsl:when test=\"$fop.extensions != 0\">right</xsl:when>\n    <xsl:when test=\"$fop1.extensions != 0\">right</xsl:when>\n    <xsl:when test=\"starts-with($writing.mode, 'lr')\">right</xsl:when>\n    <xsl:when test=\"starts-with($writing.mode, 'rl')\">left</xsl:when>\n    <xsl:when test=\"starts-with($writing.mode, 'tb')\">bottom</xsl:when>\n    <xsl:otherwise>right</xsl:otherwise>\n  </xsl:choose>\n</xsl:param>\n\n<xsl:param name=\"direction.mode\">\n  <xsl:choose>\n    <xsl:when test=\"$fop.extensions != 0 and\n                    starts-with($writing.mode, 'rl')\">\n      <xsl:message>WARNING: FOP does not support right-to-left writing-mode</xsl:message>\n      <xsl:text>lr-tb</xsl:text>\n    </xsl:when>\n    <xsl:when test=\"$fop1.extensions != 0 and\n                    starts-with($writing.mode, 'rl')\">\n      <xsl:message>\n        <xsl:text>WARNING: FOP 1.0 does not support right-to-left writing-mode; </xsl:text>\n        <xsl:text>FOP 1.1 has limited support for right-to-left writing-mode.</xsl:text>\n      </xsl:message>\n      <xsl:text>rl-tb</xsl:text>\n    </xsl:when>\n    <xsl:when test=\"starts-with($writing.mode, 'lr')\">lr-tb</xsl:when>\n    <xsl:when test=\"starts-with($writing.mode, 'rl')\">rl-tb</xsl:when>\n    <xsl:when test=\"starts-with($writing.mode, 'tb')\">tb-rl</xsl:when>\n    <xsl:otherwise>lr-tb</xsl:otherwise>\n  </xsl:choose>\n</xsl:param>\n\n\n<xsl:template name=\"anchor\">\n  <xsl:param name=\"node\" select=\".\"/>\n  <xsl:param name=\"conditional\" select=\"1\"/>\n  <xsl:variable name=\"id\">\n    <xsl:call-template name=\"object.id\">\n      <xsl:with-param name=\"object\" select=\"$node\"/>\n    </xsl:call-template>\n  </xsl:variable>\n  <xsl:if test=\"$conditional = 0 or $node/@id or $node/@xml:id\">\n    <xsl:attribute name=\"id\"><xsl:value-of select=\"$id\"/></xsl:attribute>\n  </xsl:if>\n</xsl:template>\n\n<xsl:template name=\"dingbat\">\n  <xsl:param name=\"dingbat\">bullet</xsl:param>\n  <xsl:variable name=\"symbol\">\n    <xsl:choose>\n      <xsl:when test=\"$dingbat='bullet'\">o</xsl:when>\n      <xsl:when test=\"$dingbat='copyright'\">&#x00A9;</xsl:when>\n      <xsl:when test=\"$dingbat='trademark'\">&#x2122;</xsl:when>\n      <xsl:when test=\"$dingbat='trade'\">&#x2122;</xsl:when>\n      <xsl:when test=\"$dingbat='registered'\">&#x00AE;</xsl:when>\n      <xsl:when test=\"$dingbat='service'\">(SM)</xsl:when>\n      <xsl:when test=\"$dingbat='ldquo'\">\"</xsl:when>\n      <xsl:when test=\"$dingbat='rdquo'\">\"</xsl:when>\n      <xsl:when test=\"$dingbat='lsquo'\">'</xsl:when>\n      <xsl:when test=\"$dingbat='rsquo'\">'</xsl:when>\n      <xsl:when test=\"$dingbat='em-dash'\">&#x2014;</xsl:when>\n      <xsl:when test=\"$dingbat='en-dash'\">-</xsl:when>\n      <xsl:otherwise>o</xsl:otherwise>\n    </xsl:choose>\n  </xsl:variable>\n\n  <xsl:choose>\n    <xsl:when test=\"$dingbat.fontset = ''\">\n      <xsl:copy-of select=\"$symbol\"/>\n    </xsl:when>\n    <xsl:otherwise>\n      <fo:inline font-family=\"{$dingbat.fontset}\">\n",
      "kind": 2,
      "metadata": {
        "id": 0,
        "type": "originalCode",
        "lineNumberBase": 101
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 3:03:06 PM PDT\n\nThis is a piece of XSLT (eXtensible Stylesheet Language Transformations) code. XSLT is a language for transforming XML documents into other XML documents, or other formats such as HTML for web pages, plain text or XSL Formatting Objects, which may subsequently be converted to other formats, such as PDF, PostScript and PNG.\n\nLet's break down the code:\n\n1. `<xsl:copy-of select=\"$symbol\"/>`: This is an XSLT instruction that creates a deep copy of the node or nodeset selected by the expression in the `select` attribute. In this case, it's creating a copy of the node or nodeset contained in the `symbol` variable.\n\n2. `</fo:inline>`: This closes an `fo:inline` element. `fo:inline` is an element from XSL-FO (XSL Formatting Objects), a markup language for XML document formatting which is most often used to generate PDFs. This element is used to contain an inline sequence of characters, inline-level elements, and/or white space.\n\n3. `</xsl:otherwise>` and `</xsl:choose>`: These close `xsl:otherwise` and `xsl:choose` elements. In XSLT, `xsl:choose` is used for conditional processing, similar to an `if/else` construct in other programming languages. `xsl:otherwise` is used as the \"else\" clause.\n\n4. `<xsl:template name=\"href.target\">`: This starts a named template. Named templates in XSLT are similar to functions or methods in other programming languages. They can be called from anywhere within the stylesheet using `xsl:call-template`.\n\n5. `<xsl:param name=\"context\" select=\".\"/>` and `<xsl:param name=\"object\" select=\".\"/>`: These are parameters that the template accepts. They are similar to function arguments in other programming languages.\n\n6. `<xsl:text>#</xsl:text>`: This is an XSLT instruction that outputs a text node. In this case, it's outputting a text node containing a single character: `#`.\n\n7. `<xsl:call-template name=\"object.id\">`: This is an XSLT instruction that calls a named template. In this case, it's calling a template named `object.id`.\n\n8. `<xsl:with-param name=\"object\" select=\"$object\"/>`: This is an XSLT instruction that passes a parameter to the called template. In this case, it's passing the `object` parameter.\n\n9. `</xsl:template>`: This closes the `href.target` template.\n\n10. `</xsl:stylesheet>`: This closes the stylesheet.\n\nThis code doesn't seem to have any specific algorithmic complexity as it is more about transformation and formatting of XML data rather than computation or data manipulation. \n\nFor more about XSLT, you can refer to this link: https://www.w3schools.com/xml/xsl_intro.asp. For more about XSL-FO, you can refer to this link: https://www.w3.org/TR/xsl11/.\n"
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "xml",
      "id": "1",
      "value": "        <xsl:copy-of select=\"$symbol\"/>\n      </fo:inline>\n    </xsl:otherwise>\n  </xsl:choose>\n</xsl:template>\n\n<xsl:template name=\"href.target\">\n  <xsl:param name=\"context\" select=\".\"/>\n  <xsl:param name=\"object\" select=\".\"/>\n  <xsl:text>#</xsl:text>\n  <xsl:call-template name=\"object.id\">\n    <xsl:with-param name=\"object\" select=\"$object\"/>\n  </xsl:call-template>\n</xsl:template>\n\n</xsl:stylesheet>\n\n",
      "kind": 2,
      "metadata": {
        "id": 1,
        "type": "originalCode",
        "lineNumberBase": 101
      }
    }
  ],
  "metadata": {
    "defaultDir": ".boost",
    "sourceFile": "./src/test/resources/fo.xsl"
  }
}