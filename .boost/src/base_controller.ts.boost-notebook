{
  "cells": [
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "0",
      "value": "import * as vscode from \"vscode\";\nimport { BoostConfiguration } from \"./boostConfiguration\";\n",
      "kind": 2,
      "metadata": {
        "id": 0,
        "type": "originalCode",
        "lineNumberBase": 0
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "1",
      "value": "import { BoostServiceHelper } from \"./boostServiceHelper\";\n",
      "kind": 2,
      "metadata": {
        "id": 1,
        "type": "originalCode",
        "lineNumberBase": 1
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "2",
      "value": "import { boostLogging } from \"./boostLogging\";\n",
      "kind": 2,
      "metadata": {
        "id": 2,
        "type": "originalCode",
        "lineNumberBase": 2
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "3",
      "value": "import { fetchGithubSession, getCurrentOrganization } from \"./authorization\";\n",
      "kind": 2,
      "metadata": {
        "id": 3,
        "type": "originalCode",
        "lineNumberBase": 3
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "4",
      "value": "import {\n    BoostNotebookCell,\n    BoostNotebook,\n    SerializedNotebookCellOutput,\n    NOTEBOOK_TYPE,\n} from \"./jupyter_notebook\";\n",
      "kind": 2,
      "metadata": {
        "id": 4,
        "type": "originalCode",
        "lineNumberBase": 4
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "5",
      "value": "import {\n    fullPathFromSourceFile,\n    getKernelName,\n} from \"./extension\";\n",
      "kind": 2,
      "metadata": {
        "id": 5,
        "type": "originalCode",
        "lineNumberBase": 10
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "6",
      "value": "\nexport const errorMimeType = \"application/vnd.code.notebook.error\";\n\nexport class KernelControllerBase extends BoostServiceHelper {\n    _problemsCollection: vscode.DiagnosticCollection;\n    id: string;\n    kernelLabel: string;\n    description: string;\n    outputHeader: string;\n    private _supportedLanguages = [];\n    private _useGeneratedCodeCellOptimization: boolean;\n    private useOriginalCodeCheck = false;\n\n    private _executionOrder = 0;\n    private readonly _controller: vscode.NotebookController;\n    public context: vscode.ExtensionContext;\n\n    constructor(\n        problemsCollection: vscode.DiagnosticCollection,\n        kernelId: string,\n        kernelLabel: string,\n        description: string,\n        outputType: string,\n        outputHeader: string,\n        useGeneratedCodeCellOptimization: boolean,\n        useOriginalCodeCheck: boolean,\n        context: vscode.ExtensionContext,\n        otherThis: any,\n        onServiceErrorHandler: any,\n        dynamicInputKey: string = \"code\"\n    ) {\n        super(kernelId, outputType, otherThis, dynamicInputKey,\n            (err : any) =>{\n                    if (onServiceErrorHandler !== undefined) {\n                        onServiceErrorHandler(\n                            this.context,\n                            err as Error,\n                            this.hostExtension\n                        );\n                    }\n                });\n\n        this._problemsCollection = problemsCollection;\n        this.id = getKernelName(kernelId);\n        this.kernelLabel = kernelLabel;\n        this.description = description;\n        this.outputHeader = outputHeader;\n        this._useGeneratedCodeCellOptimization =\n            useGeneratedCodeCellOptimization;\n        this.useOriginalCodeCheck = useOriginalCodeCheck;\n        this.context = context;\n\n        this._controller = vscode.notebooks.createNotebookController(\n            this.id,\n            NOTEBOOK_TYPE,\n            this.kernelLabel\n        );\n\n        this._controller.supportedLanguages = this._supportedLanguages;\n        this._controller.supportsExecutionOrder = true;\n        this._controller.executeHandler = this._executeAll.bind(this);\n    }\n\n    dispose(): void {\n        this._controller.dispose();\n    }\n\n    private async _executeAll(\n        cells: vscode.NotebookCell[],\n        notebook: vscode.NotebookDocument,\n        _: vscode.NotebookController\n    ): Promise<void> {\n        // if user is explicitly analyzing a single cell via the traditional UI, then just refresh it always\n        const forceAnalysisRefresh = cells.length === 1;\n\n        return new Promise<void>(async (resolve, reject) => {\n            try {\n                await this.executeAllWithAuthorization(\n                    cells,\n                    notebook,\n                    forceAnalysisRefresh\n                );\n                resolve();\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    async doAuthorizationExecution(): Promise<vscode.AuthenticationSession> {\n        return fetchGithubSession();\n    }\n\n    async executeAllWithAuthorization(\n        cells: vscode.NotebookCell[] | BoostNotebookCell[],\n        notebook: vscode.NotebookDocument | BoostNotebook,\n        forceAnalysisRefresh: boolean = false\n    ): Promise<void> {\n        return new Promise<void>(async (resolve, reject) => {\n            try {\n                // make sure we're authorized\n                // if not, run the authorization cell\n                const session = await this.doAuthorizationExecution();\n\n                //if not authorized, give up\n                if (!session) {\n                    return;\n                }\n\n                await this.executeAll(\n                    cells,\n                    notebook as vscode.NotebookDocument,\n                    session,\n                    forceAnalysisRefresh\n                );\n                resolve();\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    async executeAll(\n        cells: vscode.NotebookCell[] | BoostNotebookCell[],\n        notebook: vscode.NotebookDocument | BoostNotebook,\n        session: vscode.AuthenticationSession,\n        forceAnalysisRefresh: boolean = false\n    ): Promise<void> {\n        // if caller asks to force refresh, or its set globally, or set for all calls to this command\n        forceAnalysisRefresh =\n            forceAnalysisRefresh ||\n            BoostConfiguration.refreshAnalysisAlways ||\n            BoostConfiguration.refreshAnalysisAlwaysByKernel(this.command);\n\n        let successfullyCompleted = true;\n        const promises: Promise<boolean>[] = [];\n        const usingBoostNotebook = notebook instanceof BoostNotebook;\n\n        if (cells.length === 0) {\n            boostLogging.warn(\n                `No cells to ${this.command} of Notebook ${\n                    usingBoostNotebook\n                        ? notebook.fsPath\n                        : notebook.uri.toString()\n                }`,\n                false\n            );\n            return;\n        }\n\n        boostLogging.info(\n            `Starting ${this.command} of Notebook ${\n                usingBoostNotebook ? notebook.fsPath : notebook.uri.toString()\n            }`,\n            false\n        );\n        if (forceAnalysisRefresh) {\n            boostLogging.debug(\n                `Force-Refresh: Refreshing ${\n                    this.command\n                } of all cells in Notebook ${\n                    usingBoostNotebook\n                        ? notebook.fsPath\n                        : notebook.uri.toString()\n                }`\n            );\n        } else {\n            boostLogging.debug(\n                `NO-Force-Refresh: Analyzing ONLY empty and error cells for ${\n                    this.command\n                } of cells in Notebook ${\n                    usingBoostNotebook\n                        ? notebook.fsPath\n                        : notebook.uri.toString()\n                }`\n            );\n        }\n\n        for (const cell of cells) {\n            //if the cell is generated code, don't run it by default, the original code cell will\n            // run it, unless it is the only cell in array of cells being run, in which case, run it\n            if (\n                this._useGeneratedCodeCellOptimization &&\n                cell.metadata?.type === \"generatedCode\" &&\n                cells.length > 1\n            ) {\n                return;\n            }\n\n            // if this cell has output, then skip it unless we're forcing analysis\n            if (\n                !forceAnalysisRefresh &&\n                !this.isCellOutputMissingOrError(cell)\n            ) {\n                boostLogging.info(\n                    `NO-Force-Refresh: Skipping re-analysis ${this.command} of Notebook ${notebook.metadata[\"sourceFile\"]}` +\n                        ` on cell ${\n                            usingBoostNotebook\n                                ? (cell as BoostNotebookCell).id\n                                : (\n                                      cell as vscode.NotebookCell\n                                  ).document.uri.toString()\n                        }}`,\n                    false\n                );\n                continue;\n            }\n\n            if (usingBoostNotebook) {\n                boostLogging.info(\n                    `Started ${this.command} of Notebook ${\n                        notebook.metadata[\"sourceFile\"]\n                    } on cell ${\n                        (cell as BoostNotebookCell).id\n                    } at ${new Date().toLocaleTimeString()}`,\n                    !usingBoostNotebook\n                );\n            }\n            promises.push(\n                this.doExecution(notebook, cell, session).then((result) => {\n                    if (!result) {\n                        successfullyCompleted = false;\n                    }\n                    if (usingBoostNotebook) {\n                        boostLogging.info(\n                            `Finished ${this.command} of Notebook ${\n                                notebook.metadata[\"sourceFile\"]\n                            } on cell ${\n                                (cell as BoostNotebookCell).id\n                            } at ${new Date().toLocaleTimeString()}`,\n                            !usingBoostNotebook\n                        );\n                    }\n                }) as Promise<boolean>\n            );\n        }\n        await Promise.all(promises)\n            .then((results) => {\n                results.forEach((result) => {\n                    successfullyCompleted &&= result ?? true;\n                });\n                if (!successfullyCompleted) {\n                    boostLogging.error(\n                        `Error ${this.command} of Notebook ${\n                            usingBoostNotebook\n                                ? notebook.fsPath\n                                : notebook.uri.toString()\n                        }`,\n                        !usingBoostNotebook\n                    );\n                } else {\n                    boostLogging.info(\n                        `Success ${this.command} of Notebook ${\n                            usingBoostNotebook\n                                ? notebook.fsPath\n                                : notebook.uri.toString()\n                        }`,\n                        false\n                    );\n                }\n                return successfullyCompleted;\n            })\n            .catch((error) => {\n                successfullyCompleted = false;\n                boostLogging.error(\n                    `Error ${this.command} of Notebook ${\n                        usingBoostNotebook\n                            ? notebook.fsPath\n                            : notebook.uri.toString()\n                    }: ${error.toString()}}`,\n                    !usingBoostNotebook\n                );\n            });\n",
      "kind": 2,
      "metadata": {
        "id": 6,
        "type": "originalCode",
        "lineNumberBase": 17
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "7",
      "value": "    }\n\n    async doExecution(\n        notebook: vscode.NotebookDocument | BoostNotebook,\n        cell: vscode.NotebookCell | BoostNotebookCell,\n        session: vscode.AuthenticationSession,\n        serviceEndpoint: string = this.serviceEndpoint\n    ): Promise<boolean> {\n",
      "kind": 2,
      "metadata": {
        "id": 7,
        "type": "originalCode",
        "lineNumberBase": 294
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "8",
      "value": "        const usingBoostNotebook = notebook instanceof BoostNotebook;\n\n        // if not authorized, retry\n        if (!session) {\n            session = await this.doAuthorizationExecution();\n        }\n",
      "kind": 2,
      "metadata": {
        "id": 8,
        "type": "originalCode",
        "lineNumberBase": 298
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "9",
      "value": "        //if still not authorized, give up\n        if (!session) {\n            return false;\n        }\n",
      "kind": 2,
      "metadata": {
        "id": 9,
        "type": "originalCode",
        "lineNumberBase": 302
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "10",
      "value": "\n        //if cell is undefined or metadata is undefined, seems like this should never happen\n        //  since all cells have metadata\n        if (!cell || !cell.metadata) {\n            return false;\n        }\n",
      "kind": 2,
      "metadata": {
        "id": 10,
        "type": "originalCode",
        "lineNumberBase": 308
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "11",
      "value": "\n        // now get the current organization\n        let organization = await getCurrentOrganization(this.context);\n        if (!organization) {\n            return false;\n        }\n",
      "kind": 2,
      "metadata": {
        "id": 11,
        "type": "originalCode",
        "lineNumberBase": 314
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "12",
      "value": "\n        // if no useful text to process, skip it\n        const inputData = usingBoostNotebook\n            ? (cell as BoostNotebookCell).value\n            : (cell as vscode.NotebookCell).document.getText();\n\n        // skip whitespace trim on MultilineString - not worth code complexity trouble for now\n        if (\n            typeof inputData === \"string\" &&\n            (inputData as string).trim().length === 0\n        ) {\n            return true;\n        } else if (!cell.metadata.type) {\n            const reinitialized = await this.initializeMetaData(notebook, cell);\n            if (!reinitialized) {\n                boostLogging.warn(\n                    `Unable to parse contents of Cell ${\n                        cell instanceof BoostNotebookCell\n                            ? cell.id\n                            : cell.document.uri.toString()\n                    }`, false\n                );\n                return false;\n            }\n        }\n",
      "kind": 2,
      "metadata": {
        "id": 12,
        "type": "originalCode",
        "lineNumberBase": 327
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "13",
      "value": "\n        // we basically run two executions, one for the original code to generate a summary\n        // and one for the generated code\n        // if the cell is original code, run the summary generation\n        if (\n            !this.useOriginalCodeCheck ||\n            cell.metadata.type === \"originalCode\"\n        ) {\n            return await this._doKernelExecutionWithExecutionTracking(\n                notebook,\n                cell,\n                session,\n                organization,\n                serviceEndpoint\n            );\n        }\n",
      "kind": 2,
      "metadata": {
        "id": 13,
        "type": "originalCode",
        "lineNumberBase": 349
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "14",
      "value": "        return true;\n    }\n\n    private async _doKernelExecutionWithExecutionTracking(\n        notebook: vscode.NotebookDocument | BoostNotebook,\n        cell: vscode.NotebookCell | BoostNotebookCell,\n        session: vscode.AuthenticationSession,\n        organization: string,\n        serviceEndpoint: string\n    ): Promise<boolean> {\n",
      "kind": 2,
      "metadata": {
        "id": 14,
        "type": "originalCode",
        "lineNumberBase": 367
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "15",
      "value": "        const usingBoostNotebook = \"value\" in cell; // look for the value property to see if its a BoostNotebookCell\n        const execution = usingBoostNotebook\n            ? undefined\n            : this._controller.createNotebookCellExecution(\n                  cell as vscode.NotebookCell\n              );\n        let successfullyCompleted = true;\n\n        const cellId = usingBoostNotebook\n            ? (cell as BoostNotebookCell).id\n            : (cell as vscode.NotebookCell).document.uri.toString();\n\n        const startTime = Date.now();\n        if (execution) {\n            execution.executionOrder = ++this._executionOrder;\n            execution.start(startTime);\n        }\n",
      "kind": 2,
      "metadata": {
        "id": 15,
        "type": "originalCode",
        "lineNumberBase": 381
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "16",
      "value": "        const authPayload = {\n            session: session.accessToken,\n            organization: organization,\n        };\n",
      "kind": 2,
      "metadata": {
        "id": 16,
        "type": "originalCode",
        "lineNumberBase": 385
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "17",
      "value": "        try {\n            const response = await this.doKernelExecution(\n                notebook,\n                cell,\n                execution,\n                authPayload,\n                serviceEndpoint\n            );\n            return !(response instanceof Error);\n        } catch (err) {\n            successfullyCompleted = false;\n            this.updateCellOutput(\n                execution,\n                cell,\n                [],\n                usingBoostNotebook\n                    ? this._getBoostNotebookCellOutputError(\n                          this.localizeError(err as Error)\n                      )\n                    : vscode.NotebookCellOutputItem.error(\n                          this.localizeError(err as Error)\n                      ),\n                err\n            );\n            boostLogging.error(\n                `Error executing cell ${cellId}: ${(err as Error).message}`,\n                false\n            );\n            if (!usingBoostNotebook) {\n                this.addDiagnosticProblem(\n                    cell as vscode.NotebookCell,\n                    err as Error\n                );\n            }\n            return false;\n        } finally {\n            const duration = Date.now() - startTime;\n            const minutes = Math.floor(duration / 60000);\n            const seconds = ((duration % 60000) / 1000).toFixed(0);\n            if (execution) {\n                execution.end(successfullyCompleted, Date.now());\n            }\n\n            if (successfullyCompleted) {\n                boostLogging.info(\n                    `SUCCESS running ${this.command} update of Notebook ${\n                        usingBoostNotebook\n                            ? (notebook as BoostNotebook).fsPath\n                            : notebook.uri.toString()\n                    } on cell:${cellId} in ${minutes}m:${seconds.padStart(\n                        2,\n                        \"0\"\n                    )}s`,\n                    false\n                );\n            } else {\n                boostLogging.error(\n                    `Error while running ${this.command} update of Notebook ${\n                        usingBoostNotebook\n                            ? (notebook as BoostNotebook).fsPath\n                            : notebook.uri.toString()\n                    } on cell:${cellId} in ${minutes}m:${seconds.padStart(\n                        2,\n                        \"0\"\n                    )}s`,\n                    false\n                );\n            }\n        }\n",
      "kind": 2,
      "metadata": {
        "id": 17,
        "type": "originalCode",
        "lineNumberBase": 389
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "18",
      "value": "    }\n\n    isCellOutputMissingOrError(\n        cell: vscode.NotebookCell | BoostNotebookCell\n    ): boolean {\n",
      "kind": 2,
      "metadata": {
        "id": 18,
        "type": "originalCode",
        "lineNumberBase": 462
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "19",
      "value": "        if (cell.outputs.length === 0) {\n            // if we have no outputs, then we need to run it\n            return true;\n        }\n",
      "kind": 2,
      "metadata": {
        "id": 19,
        "type": "originalCode",
        "lineNumberBase": 463
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "20",
      "value": "\n        // Check if the cell has any error output\n        const hasErrorOutput = cell.outputs.some((output: any) => {\n            // ignore outputs that aren't our output type\n            if (output.metadata?.outputType !== this.outputType) {\n                return false;\n            }\n            for (const item of output.items) {\n                return item.mime === errorMimeType;\n            }\n        });\n",
      "kind": 2,
      "metadata": {
        "id": 20,
        "type": "originalCode",
        "lineNumberBase": 469
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "21",
      "value": "\n        // if an error, just run it\n        if (hasErrorOutput) {\n            return true;\n        }\n",
      "kind": 2,
      "metadata": {
        "id": 21,
        "type": "originalCode",
        "lineNumberBase": 480
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "22",
      "value": "        // Check if the cell has existing analysis (e.g. not missing)\n        return !cell.outputs.some((output: any) => {\n            // ignore outputs that aren't our output type\n            return output.metadata?.outputType === this.outputType;\n        });\n",
      "kind": 2,
      "metadata": {
        "id": 22,
        "type": "originalCode",
        "lineNumberBase": 484
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "23",
      "value": "    }\n\n    async initializeMetaData(\n        notebook: vscode.NotebookDocument | BoostNotebook,\n        cell: vscode.NotebookCell | BoostNotebookCell\n    ): Promise<boolean> {\n",
      "kind": 2,
      "metadata": {
        "id": 23,
        "type": "originalCode",
        "lineNumberBase": 493
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "24",
      "value": "        if (notebook === undefined) {\n            return false;\n        }\n",
      "kind": 2,
      "metadata": {
        "id": 24,
        "type": "originalCode",
        "lineNumberBase": 494
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "25",
      "value": "        const usingBoostNotebook = notebook instanceof BoostNotebook;\n\n        let foundCell = undefined;\n        let i = 0;\n        for (\n            ;\n            i <\n            (usingBoostNotebook ? notebook.cells.length : notebook.cellCount);\n            i++\n        ) {\n            if (\n                usingBoostNotebook\n                    ? notebook.cells[i]\n                    : notebook.cellAt(i) === cell\n            ) {\n                foundCell = usingBoostNotebook\n                    ? notebook.cells[i]\n                    : notebook.cellAt(i);\n                break;\n            }\n        }\n",
      "kind": 2,
      "metadata": {
        "id": 25,
        "type": "originalCode",
        "lineNumberBase": 506
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "26",
      "value": "        if (!foundCell) {\n            boostLogging.debug(\n                `Unable to find cell ${\n                    cell instanceof BoostNotebookCell\n                        ? cell.id\n                        : cell.document.uri.toString()\n                }` +\n                    ` in notebook ${\n                        usingBoostNotebook\n                            ? notebook.fsPath\n                            : notebook.uri.toString()\n                    }`\n            );\n            return false;\n        }\n",
      "kind": 2,
      "metadata": {
        "id": 26,
        "type": "originalCode",
        "lineNumberBase": 518
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "27",
      "value": "\n        // if we're using native boost notebook, update metadata and skip more complex VSC Notebook update process\n        if (usingBoostNotebook) {\n            (cell as BoostNotebookCell).initializeMetadata({\n                ...cell.metadata,\n                id: cell.metadata?.id ?? i,\n                type: cell.metadata?.type ?? \"originalCode\",\n            });\n            return true;\n        }\n",
      "kind": 2,
      "metadata": {
        "id": 27,
        "type": "originalCode",
        "lineNumberBase": 535
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "28",
      "value": "\n        const doc = (cell as vscode.NotebookCell).document;\n        const newCellData = new vscode.NotebookCellData(\n            vscode.NotebookCellKind.Code,\n            doc.getText(),\n            doc.languageId\n        );\n        newCellData.metadata = {\n            ...newCellData.metadata,\n            id: newCellData.metadata?.id ?? i,\n            type: newCellData.metadata?.type ?? \"originalCode\",\n        };\n",
      "kind": 2,
      "metadata": {
        "id": 28,
        "type": "originalCode",
        "lineNumberBase": 550
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "29",
      "value": "\n        const edit = new vscode.WorkspaceEdit();\n\n        // Use .set to add one or more edits to the notebook\n        edit.set(notebook.uri, [\n            // Create an edit that replaces this cell with the same cell + set metadata\n            vscode.NotebookEdit.updateCellMetadata(i, newCellData.metadata),\n        ]);\n        // Additional notebook edits...\n\n        await vscode.workspace.applyEdit(edit);\n\n        // Update the cell reference to the new cell from the replacement so the caller can use it\n        cell = notebook.cellAt(i);\n        return true;\n    }\n\n    public deserializeErrorAsProblems(cell: vscode.NotebookCell, error: Error) {\n",
      "kind": 2,
      "metadata": {
        "id": 29,
        "type": "originalCode",
        "lineNumberBase": 572
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "30",
      "value": "        // if no target Cell, skip\n        if (!cell.document) {\n            return;\n        }\n",
      "kind": 2,
      "metadata": {
        "id": 30,
        "type": "originalCode",
        "lineNumberBase": 574
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "31",
      "value": "        // if no error, skip\n        else if (!error) {\n            boostLogging.debug(\n                `No error to deserialize for cell ${cell.document.uri.toString()}`\n            );\n            return;\n        }\n",
      "kind": 2,
      "metadata": {
        "id": 31,
        "type": "originalCode",
        "lineNumberBase": 578
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "32",
      "value": "\n        // otherwise, add/update problems for this Cell\n        this.addDiagnosticProblem(cell, error);\n    }\n\n    openExecutionContext(\n        usingBoostNotebook: boolean,\n        cell: vscode.NotebookCell | BoostNotebookCell\n    ): any {\n",
      "kind": 2,
      "metadata": {
        "id": 32,
        "type": "originalCode",
        "lineNumberBase": 592
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "33",
      "value": "        const execution = usingBoostNotebook\n            ? undefined\n            : this._controller.createNotebookCellExecution(\n                  cell as vscode.NotebookCell\n              );\n\n        const startTime = Date.now();\n        if (execution) {\n            execution.executionOrder = ++this._executionOrder;\n            execution.start(startTime);\n        }\n",
      "kind": 2,
      "metadata": {
        "id": 33,
        "type": "originalCode",
        "lineNumberBase": 600
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "34",
      "value": "\n        return { execution, startTime };\n",
      "kind": 2,
      "metadata": {
        "id": 34,
        "type": "originalCode",
        "lineNumberBase": 605
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "35",
      "value": "    }\n\n    closeExecutionContext(\n        executionContext: any,\n        successfullyCompleted: boolean\n    ) {\n",
      "kind": 2,
      "metadata": {
        "id": 35,
        "type": "originalCode",
        "lineNumberBase": 611
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "36",
      "value": "        const duration = Date.now() - executionContext.startTime;\n        const minutes = Math.floor(duration / 60000);\n        const seconds = ((duration % 60000) / 1000).toFixed(0);\n        if (executionContext.execution) {\n            executionContext.execution.end(successfullyCompleted, Date.now());\n        }\n",
      "kind": 2,
      "metadata": {
        "id": 36,
        "type": "originalCode",
        "lineNumberBase": 615
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "37",
      "value": "    }\n\n    // allow derived classes to override the error - e.g. change the error message\n    localizeError(error: Error): Error {\n",
      "kind": 2,
      "metadata": {
        "id": 37,
        "type": "originalCode",
        "lineNumberBase": 621
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "38",
      "value": "        error.message = `Boost ${this.outputHeader} failed: ${error.message}`;\n",
      "kind": 2,
      "metadata": {
        "id": 38,
        "type": "originalCode",
        "lineNumberBase": 622
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "39",
      "value": "        return error;\n    }\n\n    _getBoostNotebookCellOutput(\n        output: string,\n        mimeType: string\n    ): SerializedNotebookCellOutput {\n",
      "kind": 2,
      "metadata": {
        "id": 39,
        "type": "originalCode",
        "lineNumberBase": 629
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "40",
      "value": "        return {\n            items: [\n                {\n                    mime: mimeType,\n                    data: output,\n                },\n            ],\n            metadata: {\n                outputType: this.outputType,\n            },\n        };\n",
      "kind": 2,
      "metadata": {
        "id": 40,
        "type": "originalCode",
        "lineNumberBase": 630
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "41",
      "value": "    }\n\n    _getBoostNotebookCellOutputError(\n        error: Error\n    ): SerializedNotebookCellOutput {\n",
      "kind": 2,
      "metadata": {
        "id": 41,
        "type": "originalCode",
        "lineNumberBase": 645
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "42",
      "value": "        return {\n            items: [\n                {\n                    mime: \"application/vnd.code.notebook.error\", // for compatibility with VS Code\n                    data: error.toString(),\n                },\n            ],\n            metadata: {\n                outputType: this.outputType,\n            },\n        };\n",
      "kind": 2,
      "metadata": {
        "id": 42,
        "type": "originalCode",
        "lineNumberBase": 646
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "43",
      "value": "    }\n\n    async onProcessServiceRequest(\n        execution: vscode.NotebookCellExecution | undefined,\n        notebook: vscode.NotebookDocument | BoostNotebook,\n        cell: vscode.NotebookCell | BoostNotebookCell,\n        payload: any,\n        serviceEndpoint: string = this.serviceEndpoint\n    ): Promise<any> {\n",
      "kind": 2,
      "metadata": {
        "id": 43,
        "type": "originalCode",
        "lineNumberBase": 665
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "44",
      "value": "        let successfullyCompleted = true;\n        const usingBoostNotebook = \"value\" in cell; // look for the value property to see if its a BoostNotebookCell\n\n        // using axios, make a web POST call to Boost Service with the code as in a json object code=code\n        let response;\n        let serviceError: Error = new Error();\n        try {\n            response = await this.makeBoostServiceRequest(\n                cell,\n                serviceEndpoint,\n                payload\n            );\n        } catch (err: any) {\n            successfullyCompleted = false;\n            serviceError = err;\n        }\n",
      "kind": 2,
      "metadata": {
        "id": 44,
        "type": "originalCode",
        "lineNumberBase": 672
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "45",
      "value": "        if (successfullyCompleted) {\n            if (response instanceof Error) {\n                successfullyCompleted = false;\n                serviceError = response as Error;\n            } else if (response === undefined) {\n                throw new Error(\"Unexpected empty result from Boost Service\");\n            } else if (response.data instanceof Error) {\n                successfullyCompleted = false;\n                serviceError = response.data as Error;\n            }\n        }\n",
      "kind": 2,
      "metadata": {
        "id": 45,
        "type": "originalCode",
        "lineNumberBase": 682
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "46",
      "value": "\n        // we wrap mimeTypes in an object so that we can pass it by reference and change it\n        let mimetype = { str: \"text/markdown\" };\n",
      "kind": 2,
      "metadata": {
        "id": 46,
        "type": "originalCode",
        "lineNumberBase": 695
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "47",
      "value": "\n        let outputItem;\n        if (usingBoostNotebook) {\n            outputItem = successfullyCompleted\n                ? this._getBoostNotebookCellOutput(\n                      this.onKernelOutputItem(response, cell, mimetype),\n                      mimetype.str\n                  )\n                : this._getBoostNotebookCellOutputError(\n                      this.localizeError(serviceError as Error)\n                  );\n        } else {\n            outputItem = successfullyCompleted\n                ? vscode.NotebookCellOutputItem.text(\n                      this.onKernelOutputItem(response, cell, mimetype),\n                      mimetype.str\n                  )\n                : vscode.NotebookCellOutputItem.error(\n                      this.localizeError(serviceError as Error)\n                  );\n        }\n",
      "kind": 2,
      "metadata": {
        "id": 47,
        "type": "originalCode",
        "lineNumberBase": 698
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "48",
      "value": "\n        let details = this.onKernelProcessResponseDetails(\n            response,\n            cell,\n            notebook,\n            mimetype\n        );\n\n        // extend the outputItem.metadata field with the results of a call to onKernelOutputItemDetails\n        this.updateCellOutput(\n            execution,\n            cell,\n            details,\n            outputItem,\n            serviceError\n        );\n        if (!successfullyCompleted) {\n            const cellId = usingBoostNotebook\n                ? cell.id\n                : cell.document.uri.toString();\n            boostLogging.error(\n                `Error in cell ${cellId}: ${serviceError.message}`,\n                false\n            );\n            if (!usingBoostNotebook) {\n                this.addDiagnosticProblem(cell, serviceError as Error);\n            }\n        }\n",
      "kind": 2,
      "metadata": {
        "id": 48,
        "type": "originalCode",
        "lineNumberBase": 733
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "49",
      "value": "\n        return response;\n    }\n\n    updateCellOutput(\n        execution: vscode.NotebookCellExecution | undefined,\n        cell: vscode.NotebookCell | BoostNotebookCell,\n        details: [],\n        outputItem:\n            | vscode.NotebookCellOutputItem\n            | SerializedNotebookCellOutput,\n        err: unknown\n    ) {\n",
      "kind": 2,
      "metadata": {
        "id": 49,
        "type": "originalCode",
        "lineNumberBase": 757
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "50",
      "value": "        const usingBoostNotebook = \"value\" in cell; // look for the value property to see if its a BoostNotebookCell\n\n        if (usingBoostNotebook || !execution) {\n            const boostCell = cell as BoostNotebookCell;\n            const boostOutput = outputItem as SerializedNotebookCellOutput;\n            //extend boostOutput.medata with details\n            boostOutput.metadata = {\n                ...boostOutput.metadata,\n                details: details,\n            };\n            boostCell.updateOutputItem(this.outputType, boostOutput);\n            return;\n        }\n",
      "kind": 2,
      "metadata": {
        "id": 50,
        "type": "originalCode",
        "lineNumberBase": 760
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "51",
      "value": "\n        const outputItems: vscode.NotebookCellOutputItem[] = [\n            outputItem as vscode.NotebookCellOutputItem,\n        ];\n\n        // we will have one NotebookCellOutput per type of output.\n        // first scan the existing outputs of the cell and see if we already have an output of this type\n        // if so, replace it\n        let existingOutputs = cell.outputs;\n        let existingOutput = existingOutputs.find(\n            (output) => output.metadata?.outputType === this.outputType\n        );\n        if (existingOutput) {\n            execution.replaceOutputItems(outputItems, existingOutput);\n            //udpate existingOutput.metadata with details, replacing any existing details\n            if (existingOutput.metadata?.details) {\n                delete existingOutput.metadata.details;\n            }\n            existingOutput.metadata = {\n                ...existingOutput.metadata,\n                details: details,\n            };\n        } else {\n            // create a new NotebookCellOutput with the outputItems array\n            let metadata = {\n                outputType: this.outputType,\n                details: details,\n            };\n            const output = new vscode.NotebookCellOutput(outputItems, metadata);\n\n            execution.appendOutput(output);\n        }\n",
      "kind": 2,
      "metadata": {
        "id": 51,
        "type": "originalCode",
        "lineNumberBase": 783
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "52",
      "value": "    }\n\n    onKernelOutputItem(\n        response: any,\n        cell: vscode.NotebookCell | BoostNotebookCell,\n        mimetype: any\n    ): string {\n",
      "kind": 2,
      "metadata": {
        "id": 52,
        "type": "originalCode",
        "lineNumberBase": 809
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "53",
      "value": "        throw new Error(\"Not implemented\");\n    }\n\n    onKernelProcessResponseDetails(\n        response: any,\n        cell: vscode.NotebookCell | BoostNotebookCell,\n        notebook: vscode.NotebookDocument | BoostNotebook,\n        mimetype: any\n    ): any {\n",
      "kind": 2,
      "metadata": {
        "id": 53,
        "type": "originalCode",
        "lineNumberBase": 818
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "54",
      "value": "        return [];\n    }\n\n    // relatedUri should be the Uri of the original source file\n    addDiagnosticProblem(\n        // document should be the Cell's document that has the problem(s)\n        cell: vscode.NotebookCell,\n        // error should be the Error object that was thrown\n        error: Error,\n        // severity of the problem\n        severity: vscode.DiagnosticSeverity = vscode.DiagnosticSeverity.Error,\n        // cellPosition should be the problematic range of the Cell in the Notebook\n        cellRange: vscode.Range = new vscode.Range(0, 0, 0, 0),\n        // (optional) relatedUri should be the Uri of the original source file\n        relatedUri?: vscode.Uri,\n        // (optional) relatedRange should be the problematic area in the source file\n        relatedRange?: vscode.Range,\n        relatedMessage?: string\n    ): void {\n",
      "kind": 2,
      "metadata": {
        "id": 54,
        "type": "originalCode",
        "lineNumberBase": 837
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "55",
      "value": "        // if no target Cell, clear all problems\n        if (!cell.document) {\n            this._problemsCollection.clear();\n            return;\n        }\n",
      "kind": 2,
      "metadata": {
        "id": 55,
        "type": "originalCode",
        "lineNumberBase": 839
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "56",
      "value": "        // if no error, clear problems for this Cell\n        else if (!error) {\n            this._problemsCollection.delete(cell.document.uri);\n            return;\n        }\n",
      "kind": 2,
      "metadata": {
        "id": 56,
        "type": "originalCode",
        "lineNumberBase": 844
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "57",
      "value": "\n        if (!relatedUri && BoostConfiguration.useSourceFileForProblems) {\n            if (!cell.notebook.metadata.sourceFile) {\n                relatedUri = vscode.Uri.parse(\"file:///unknown\", true);\n            } else {\n                relatedUri = fullPathFromSourceFile(\n                    cell.notebook.metadata.sourceFile\n                );\n            }\n        }\n",
      "kind": 2,
      "metadata": {
        "id": 57,
        "type": "originalCode",
        "lineNumberBase": 849
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "58",
      "value": "        if (!severity) {\n            severity = vscode.DiagnosticSeverity.Error;\n        }\n",
      "kind": 2,
      "metadata": {
        "id": 58,
        "type": "originalCode",
        "lineNumberBase": 858
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "59",
      "value": "        if (!cellRange) {\n            cellRange = new vscode.Range(0, 0, 0, 0);\n        }\n",
      "kind": 2,
      "metadata": {
        "id": 59,
        "type": "originalCode",
        "lineNumberBase": 861
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "60",
      "value": "        this._problemsCollection.set(cell.document.uri, [\n            {\n                code: error.name, // '<CodeBlockContextGoesHere>',\n                message: error.message, // '<BoostServiceAnalsysis>',\n                range: cellRange,\n                severity: severity,\n                source: NOTEBOOK_TYPE,\n\n                // provide context for source file\n                relatedInformation: relatedUri\n                    ? [\n                          new vscode.DiagnosticRelatedInformation(\n                              new vscode.Location(\n                                  relatedUri,\n                                  relatedRange ?? new vscode.Position(0, 0)\n                              ),\n                              relatedMessage ?? \"Source File\"\n                          ),\n                      ]\n                    : undefined,\n            },\n",
      "kind": 2,
      "metadata": {
        "id": 60,
        "type": "originalCode",
        "lineNumberBase": 865
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "61",
      "value": "        ]);\n    }\n}\n\n",
      "kind": 2,
      "metadata": {
        "id": 61,
        "type": "originalCode",
        "lineNumberBase": 865
      }
    }
  ],
  "metadata": {
    "defaultDir": ".boost",
    "sourceFile": "./src/base_controller.ts"
  }
}