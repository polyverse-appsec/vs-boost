{
  "cells": [
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 3:56:22 PM PDT\n\nThis is a JavaScript (or more precisely, TypeScript) code snippet that imports several modules for use within the file. Let's break it down:\n\n1. `import * as vscode from 'vscode';`\n   \n   This line imports the entire `vscode` module. This module is the API for interacting with Visual Studio Code. It provides a set of vscode-specific functionality that is accessible in the rest of the code. For more information, you can check out the [VS Code API](https://code.visualstudio.com/api/references/vscode-api).\n\n2. `import * as fs from 'fs';`\n   \n   This line imports the entire `fs` module. `fs` stands for File System. It is a built-in Node.js module that provides an API for interacting with the file system, allowing you to read/write files, create directories, etc. For more information, you can check the [Node.js File System API](https://nodejs.org/api/fs.html).\n\n3. `import * as _ from 'lodash';`\n   \n   This line imports the entire `lodash` module. Lodash is a JavaScript utility library that provides helpful methods for manipulation and combination of arrays, objects, strings, etc. For more information, you can check the [Lodash documentation](https://lodash.com/docs/).\n\n4. `import { BoostExtension } from './BoostExtension';`\n   \n   This line imports the `BoostExtension` object from the local file `BoostExtension.ts`. The specific object being imported suggests that `BoostExtension` is either a class, a function, or an object defined and exported in the `BoostExtension.ts` file.\n\nThe architecture of this code is quite straightforward and modular. Each imported module or object is responsible for a specific set of functionalities, which is a good practice in software design. This code snippet doesn't seem to conflict with any common architectural guidelines or principles."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "0",
      "value": "import * as vscode from 'vscode';\nimport * as fs from 'fs';\nimport * as _ from 'lodash';\nimport { BoostExtension } from './BoostExtension';\n",
      "kind": 2,
      "metadata": {
        "id": 0,
        "type": "originalCode",
        "lineNumberBase": 2
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 3:56:47 PM PDT\n\nThis line of code is written in JavaScript and is using ES6 import syntax to include the 'marked' library in your project. \n\nThe 'marked' library is a markdown parser and compiler. It is built for speed and can be used to convert markdown into HTML. Markdown is a lightweight markup language that you can use to add formatting elements to plaintext text documents.\n\nHere's what the code is doing:\n\n`import {marked} from 'marked';`\n\nThis line is importing the 'marked' function from the 'marked' library. The 'marked' function is used to parse markdown syntax and convert it to HTML. \n\nThis statement is using destructuring assignment, a feature introduced in ES6. It makes it possible to unpack values from arrays, or properties from objects, into distinct variables. In this case, it's importing the 'marked' function from the 'marked' module.\n\nThis is a very basic and simple line of code, and there are no algorithms being used in this specific line. It's simply importing a function from a library. \n\nFor more information about the 'marked' library, you can check out the documentation here: https://marked.js.org/. \n\nFor more information about ES6 import and export syntax, you can read this article: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import. \n\nFor more information about destructuring assignment in JavaScript, you can read this article: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment. \n\nAs for the architectural guidelines, this line of code seems to have no conflicts. It's a common practice to import libraries in JavaScript and there are no additional special architectural guidelines or constraints mentioned for the project."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "1",
      "value": "import {marked} from 'marked';\n",
      "kind": 2,
      "metadata": {
        "id": 1,
        "type": "originalCode",
        "lineNumberBase": 3
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 3:57:10 PM PDT\n\nThis code snippet is written in TypeScript, a strongly typed superset of JavaScript. It imports three items from another module named 'extension'. The items are `BoostFileType`, `findCellByKernel`, and `getBoostFile`. \n\nLet's go through each of these:\n\n1. `BoostFileType`: This could be a type definition, an interface, or a class that describes the structure of a Boost file object in this software project. The specific details of `BoostFileType` are not provided in this snippet, but it is presumably defined in the 'extension' module.\n\n2. `findCellByKernel`: This is a function that presumably searches for a cell (most likely in the context of a Jupyter notebook or similar data science tool) that matches a specific kernel. The kernel is likely a computing environment for running code cells. The specific algorithm used by this function is not provided in this snippet, but it could be a simple linear search or a more complex search algorithm depending on the data structure that holds the cells.\n\n3. `getBoostFile`: This is a function that presumably retrieves a Boost file. The specific algorithm used by this function is not provided in this snippet, but it most likely involves file I/O operations.\n\nThis code snippet does not provide enough context to determine if it is consistent with or conflicts with the overall project architecture and design principles. However, it is a common practice in modular programming to separate concerns and import functionality from different modules as needed. This helps to keep the codebase organized and maintainable.\n\nFor more information about TypeScript, you can visit: [TypeScript Documentation](https://www.typescriptlang.org/docs/)\nFor more information about modular programming, you can visit: [Modular Programming in JavaScript](https://www.sitepoint.com/understanding-module-exports-exports-node-js/)"
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "2",
      "value": "import { BoostFileType, findCellByKernel, getBoostFile } from './extension';\n",
      "kind": 2,
      "metadata": {
        "id": 2,
        "type": "originalCode",
        "lineNumberBase": 4
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 3:57:31 PM PDT\n\nThe given code is a single line of JavaScript (or TypeScript), specifically an import statement using ES6 syntax. This line of code doesn't include any algorithm. It's a part of the modular programming paradigm where you divide the program into separate sub-programs.\n\nHere's the breakdown:\n\n`import`: This is a keyword used to import functions, objects or values from another module into the current module. \n\n`{ BoostUserAnalysisType }`: This is the specific item that is being imported from the module. The item being imported is enclosed in curly braces `{}`. This syntax is used for importing specific exports from a module, also known as named exports. In this case, `BoostUserAnalysisType` is likely an object, function, or value that's been exported from the './userAnalysisType' module.\n\n`from`: This is another keyword that's used to specify the path of the module from which to import the specified item.\n\n`'./userAnalysisType'`: This is the path to the module that contains the item to be imported. The `./` at the beginning of the path indicates that the module is in the same directory as the current file. The path doesn't include the file extension, which is a common practice in JavaScript and TypeScript. The module is likely a `.js` or `.ts` file, given the context.\n\nThis code doesn't seem to conflict with any architectural guidelines, as you mentioned that there are no additional special architectural guidelines or constraints for this project.\n\nFor more information about ES6 imports and exports, you can refer to this link: [ES6 Modules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules)"
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "3",
      "value": "import { BoostUserAnalysisType } from './userAnalysisType';\n",
      "kind": 2,
      "metadata": {
        "id": 3,
        "type": "originalCode",
        "lineNumberBase": 5
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 3:57:58 PM PDT\n\nThis code is written in TypeScript, a statically typed superset of JavaScript. It's a small piece of code and doesn't contain any algorithms. It's essentially importing two objects from a module located at './jupyter_notebook'. \n\nLet's break it down:\n\n1. `import { BoostNotebook, BoostNotebookCell } from './jupyter_notebook';`\n\n   This line is using the ES6 (ECMAScript 2015) module syntax to import two specific exports from a module. The module is located at a relative path './jupyter_notebook'. The file extension is not specified, but it is typically either `.js` for JavaScript files or `.ts` for TypeScript files.\n\n   The `{ BoostNotebook, BoostNotebookCell }` syntax is called destructuring. It's a way to import only specific exports from a module. In this case, `BoostNotebook` and `BoostNotebookCell` are being imported.\n\n   These could be any kind of export -- functions, classes, constants, etc. Without more code, it's impossible to say exactly what these are, but given their names, it's likely that `BoostNotebook` and `BoostNotebookCell` are classes. \n\n   The `BoostNotebook` class probably represents a notebook in the Boostnote application, which is a note-taking app for programmers. The `BoostNotebookCell` class probably represents a single cell in such a notebook. A cell is a block of input that can be executed by the notebook's kernel (e.g., Python or R code in a Jupyter notebook).\n\n   The './jupyter_notebook' module probably contains code related to the implementation or manipulation of such notebooks and cells in the Boostnote application.\n\nHere is a link to understand more about ES6 import/export syntax: [Mozilla Developer Network (MDN) - import](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import)\n\nAnd here is a link to learn more about Boostnote: [Boostnote](https://boostnote.io/)"
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "4",
      "value": "import { BoostNotebook, BoostNotebookCell } from './jupyter_notebook';\n",
      "kind": 2,
      "metadata": {
        "id": 4,
        "type": "originalCode",
        "lineNumberBase": 6
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 3:58:22 PM PDT\n\nThis code is written in JavaScript, specifically using ES6 (ECMAScript 6) syntax. It is importing a module named `boostLogging` from a file in the same directory named `boostLogging.js`. \n\nIn JavaScript, modules are pieces of reusable code that can be exported from one program and imported for use in another. They are particularly useful for maintaining a clean and organized code base, and for reusing code across multiple files or projects.\n\nHere's a breakdown of what the code is doing:\n\n`import { boostLogging } from './boostLogging';`\n\n- `import`: This is a reserved keyword in JavaScript used to import functions, objects or values from another module or file.\n\n- `{ boostLogging }`: This is the specific function, object or value that is being imported from the module. The curly braces `{}` are used for named imports. In this case, `boostLogging` is a named export in the `boostLogging.js` file.\n\n- `from './boostLogging'`: This specifies the path to the module or file that contains the export. The `./` indicates that the module is in the same directory as the current file.\n\n- `;`: This is the end of the statement.\n\nThe code does not contain any specific algorithm, it is just importing a module for use in the current file.\n\nFor more information on JavaScript modules and import/export syntax, you can visit the Mozilla Developer Network (MDN) web docs: [JavaScript Modules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules)"
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "5",
      "value": "import { boostLogging } from './boostLogging';\n",
      "kind": 2,
      "metadata": {
        "id": 5,
        "type": "originalCode",
        "lineNumberBase": 7
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 3:58:56 PM PDT\n\nThis line of code is written in TypeScript, which is a statically typed superset of JavaScript that adds types to the language. TypeScript is open-source and developed by Microsoft. More information about TypeScript can be found here: https://www.typescriptlang.org/\n\nThe code is an import statement that is pulling in a specific export from another module. The imported module is 'controllerOutputTypes' and the specific export being imported is 'ControllerOutputType'. \n\nImport statements are part of ES6 (ECMAScript 2015) module syntax, and they allow you to include functions, objects or values from other files or modules into your current file. More information about ES6 modules can be found here: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\n\nHere's a breakdown of the import statement:\n\n- `import`: This is the keyword that begins the import statement. It tells the compiler that you're bringing in some code from another file or module.\n  \n- `{ ControllerOutputType }`: This is the specific export that you're importing from the other module. The curly braces are used when you're importing a specific export rather than the default export from a module. If the module exported multiple things, you could import multiple exports by separating them with commas inside the curly braces, like so: `{ export1, export2, export3 }`.\n  \n- `from`: This keyword is used to specify the path to the module that you're importing from.\n  \n- `'./controllerOutputTypes'`: This is the path to the module that you're importing from. The `./` at the beginning of the path indicates that the module is in the same directory as the current file.\n\nThe `ControllerOutputType` likely refers to a specific type or interface defined in the 'controllerOutputTypes' module. This type is likely used to define the structure of the data that a controller can return in this software project. Without more information about what's inside the 'controllerOutputTypes' module, it's hard to say exactly what `ControllerOutputType` is, but it's likely a type or interface that's used to ensure consistency and correctness in the data returned by controllers in this project."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "6",
      "value": "import { ControllerOutputType } from './controllerOutputTypes';\n",
      "kind": 2,
      "metadata": {
        "id": 6,
        "type": "originalCode",
        "lineNumberBase": 8
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 3:59:27 PM PDT\n\nThis code is written in JavaScript and uses Visual Studio Code's (VSCode) Extension API. The purpose of this code is to fetch all commands (whether they are internal or not) that start with a specific prefix.\n\nLet's break it down:\n\n1. `const commands = await vscode.commands.getCommands(false);`\n\n   This line of code uses the `getCommands` method from the `commands` namespace of the VSCode Extension API. This method returns a promise that resolves to an array of all available command identifiers. The `false` parameter means that even internal commands (commands not intended for use by extensions) will be included in the result.\n\n   The `await` keyword is used to pause and wait for the promise to resolve before moving on to the next line of code. This keyword can only be used inside an `async` function.\n\n2. `const myCommands = commands.filter((command) => { return command.startsWith(`polyverse-boost-${this._type}`); });`\n\n   This line of code uses the `filter` method, which is a built-in method of JavaScript arrays. `filter` creates a new array with all elements that pass the test implemented by the provided function. \n\n   In this case, the test is whether the command starts with the string `polyverse-boost-` followed by the value of `this._type`. The `startsWith` method is a built-in JavaScript string method that checks if a string starts with specified characters and returns `true` or `false` as appropriate.\n\nThe algorithm used here is a simple filtering algorithm. It iterates over the array of commands, checks each command to see if it passes a certain condition, and if it does, includes it in the new array.\n\nFor more information on the VSCode Extension API, you can visit the official documentation at https://code.visualstudio.com/api/references/vscode-api.\n\nFor more information on JavaScript's `filter` and `startsWith` methods, you can visit:\n- `filter`: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\n- `startsWith`: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\n\nRegarding the architectural guidelines, the code appears to be well-structured and doesn't seem to conflict with any general software architecture principles. However, without additional context or specific guidelines, it's hard to give a more detailed analysis."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "7",
      "value": "\n/*\n    // ability to get all VS commands - whether internal or not, filtered by prefix\n    const commands = await vscode.commands.getCommands(false);\n    const myCommands = commands.filter((command) => {\n        return command.startsWith(`polyverse-boost-${this._type}`);\n    });\n",
      "kind": 2,
      "metadata": {
        "id": 7,
        "type": "originalCode",
        "lineNumberBase": 13
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 4:00:00 PM PDT\n\nThis code is written in TypeScript and is part of a Visual Studio Code (VS Code) extension. It defines a class `BoostMarkdownViewProvider` that implements `vscode.WebviewViewProvider`. This class is used to provide a custom webview-based view in the VS Code sidebar or panel. \n\nThe class has several properties, including `_view`, `_context`, `_boostExtension`, `_type`, `_initialized`, and `usefulContent`, and a constructor that initializes these properties.\n\nThe `resolveWebviewView` method is an implementation of a method from `vscode.WebviewViewProvider`. It's called when VS Code is about to show the webview, and it's where you set up the webview's initial state and handle any messages from the webview.\n\nThe `_resolveWebviewView` method is the actual implementation of `resolveWebviewView`. It sets the webview options, allowing scripts and defining local resource roots. It also sets up a message handler for the webview and calls the `refresh` method.\n\nThe `refresh` method updates the HTML content of the webview by calling the `_refresh` method. The `_refresh` method checks if the `_view` is defined and then sets its HTML content by calling the `_getHtmlForWebview` method.\n\nThe `_getHtmlForWebview` method is responsible for generating the HTML content for the webview. It reads a `markdown.html` file from disk, applies a lodash template to it, and replaces certain parts of the template with dynamic content. It also handles different cases based on the `_type` property and loads different content accordingly.\n\nThe `BoostMarkdownViewProvider` class is part of a larger VS Code extension project. The extension appears to provide some sort of analysis functionality, likely related to code security or compliance, and presents the results of this analysis in a custom webview.\n\nKey algorithms used in this code include filesystem operations (reading files), string manipulation (template processing), and event handling (handling messages from the webview).\n\nFor more information on creating webview views in VS Code, you can check out the [VS Code Extension API documentation](https://code.visualstudio.com/api/extension-guides/webview#webview-views)."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "8",
      "value": "*/\n\nexport class BoostMarkdownViewProvider implements vscode.WebviewViewProvider {\n\n\tpublic static readonly viewType = 'polyverse-boost-markdown-view';\n\n\tprivate _view?: vscode.WebviewView;\n\tprivate _context: vscode.ExtensionContext;\n\tprivate _boostExtension: BoostExtension;\n\tprivate _type: string;\n    private _initialized: boolean = false;\n\n\tconstructor(\n\t\tprivate readonly context: vscode.ExtensionContext,\n\t\tprivate boostExtension: BoostExtension,\n\t\tprivate type: string,\n        private usefulContent : boolean = true\n\t) { \n\t\tthis._context = context;\n\t\tthis._boostExtension = boostExtension;\n\t\tthis._type = type;\n\t}\n\n\tpublic async resolveWebviewView(\n\t\twebviewView: vscode.WebviewView,\n\t\tcontext: vscode.WebviewViewResolveContext,\n\t\t_token: vscode.CancellationToken,\n\t) {\n        try {\n            this._resolveWebviewView(webviewView, context, _token);\n        } catch (e) {\n            boostLogging.error(`Could not load Boost Markdown View due to ${e}`, false);\n        }\n    }\n\n\tasync _resolveWebviewView(\n\t\twebviewView: vscode.WebviewView,\n\t\tcontext: vscode.WebviewViewResolveContext,\n\t\t_token: vscode.CancellationToken,\n\t) {\n\t\tthis._view = webviewView;\n\n\t\twebviewView.webview.options = {\n\t\t\t// Allow scripts in the webview\n\t\t\tenableScripts: true,\n\n\t\t\tlocalResourceRoots: [\n\t\t\t\tthis.context.extensionUri\n\t\t\t]\n\t\t};\n    \n\t\twebviewView.webview.onDidReceiveMessage(data => {\n\t\t\tswitch (data.command) {\n\t\t\t\tcase 'initialize-visibility':\n\t\t\t\t\t{\n                        if (!this._initialized && !this.usefulContent) {\n//                            vscode.commands.executeCommand(`polyverse-boost-${this._type}-view.removeView`);\n                        }\n                        break;\n\t\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthis.refresh();\n        this._initialized = true;\n    }\n\n    public refresh() {\n        try {\n            this._refresh();\n        } catch (e) {\n            boostLogging.error(`Could not refresh Boost Markdown View due to ${e}`, false);\n        }\n    }\n\n\tasync _refresh() {\n\t\tif (this._view) {\n\t\t\tthis._view.webview.html = this._getHtmlForWebview(this._view.webview);\n\n            this._view.show?.(true);\n\t\t}\n\t}\n\n    private _getHtmlForWebview(webview: vscode.Webview) {\n\t\tconst codiconsUri = webview.asWebviewUri(vscode.Uri.joinPath(this._context.extensionUri, 'node_modules', '@vscode/codicons', 'dist', 'codicon.css'));\n        const htmlPathOnDisk = vscode.Uri.joinPath(this.context.extensionUri, 'resources', 'dashboard', 'markdown.html');\n\t\tconst jsPathOnDisk = vscode.Uri.joinPath(this.context.extensionUri, 'out', 'dashboard', 'markdown', 'main.js');\n        const jsSrc = webview.asWebviewUri(jsPathOnDisk);\n\t\tconst nonce = 'nonce-123456'; // TODO: add a real nonce here\n        const rawHtmlContent = fs.readFileSync(htmlPathOnDisk.fsPath, 'utf8');\n    \n        const template = _.template(rawHtmlContent);\n\t\tconst convert = marked.parse;\n\t\tconst title = \"Markdown\";\n\n        let boostContent = `Missing Analysis Content found for ${this._type} - please run Analyze All to generate content`;\n\n        const workspaceFolder = vscode.workspace.workspaceFolders?.[0];\n        if (!workspaceFolder) {\n            boostContent = `No workspace folder found - please open a workspace folder`;\n        } else {\n            const summaryDataUri = getBoostFile(workspaceFolder.uri, BoostFileType.summary);\n            const boostNotebook = new BoostNotebook();\n            // if we have a summary file, load it\n            let ourCellContent = \"\";\n            if (fs.existsSync(summaryDataUri.fsPath)) {\n                boostNotebook.load(summaryDataUri.fsPath);\n                switch (this._type) {\n                    case \"doc\":\n                        ourCellContent = (findCellByKernel(boostNotebook, ControllerOutputType.explain) as BoostNotebookCell)?.value;\n                        ourCellContent = `\\n\\n${(findCellByKernel(boostNotebook, ControllerOutputType.flowDiagram ) as BoostNotebookCell)?.value}`;\n                        break;\n                    case BoostUserAnalysisType.security:\n                        ourCellContent = (findCellByKernel(boostNotebook, ControllerOutputType.analyze) as BoostNotebookCell)?.value;\n                        break;\n                    case BoostUserAnalysisType.compliance:\n                        ourCellContent = (findCellByKernel(boostNotebook, ControllerOutputType.compliance) as BoostNotebookCell)?.value;\n                        break;\n                    case BoostUserAnalysisType.blueprint:\n                        ourCellContent = (findCellByKernel(boostNotebook, ControllerOutputType.blueprint ) as BoostNotebookCell)?.value;\n                        break;\n                    default:\n                        ourCellContent = `Unexpected type of Analysis: ${this._type} - Unable to render markdown`;\n                        break;\n                }\n            } else {\n                boostLogging.debug(`No summary file found at ${summaryDataUri.fsPath}`);\n            }\n            if (ourCellContent) {\n                const summaryError = \"\\\"Error: Boost Summary failed: \";\n                if (ourCellContent.startsWith(summaryError)) {\n                    boostContent =\n                        \"***Error Building Summary***\\n\\n\" +\n                        \"Please review below error, then run Analyze and Summary to regenerate Summary data\\n\\n\" +\n                        ourCellContent.substring(summaryError.length);\n                    if (boostContent.endsWith(\"\\\"\")) {\n                        boostContent.substring(0, boostContent.length - 1);\n                    }\n                    this.usefulContent = false;\n                } else {\n                    boostContent = ourCellContent;\n                    this.usefulContent = true;\n                }\n            } else {\n                boostContent = `***To Generate Summary***\\n\\nPlease check the \"Documentation\" analysis from the Analysis Summary panel above and press \"Run Selected Analyses\" button`;\n                this.usefulContent = false;\n            }\n        }\n        const content = boostContent;\n        const htmlContent = template({ jsSrc, nonce, convert, codiconsUri, content, title});\n    \n        return htmlContent;\n    }\n}\n",
      "kind": 2,
      "metadata": {
        "id": 8,
        "type": "originalCode",
        "lineNumberBase": 18
      }
    }
  ],
  "metadata": {
    "defaultDir": ".boost",
    "sourceFile": "./src/markdown_view.ts"
  }
}