{
  "cells": [
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 3:14:46 PM PDT\n\nThe provided code is written in TypeScript, a statically typed superset of JavaScript. It imports modules for use in a Visual Studio Code extension and for making HTTP requests. It also imports a type definition from another module in the same project. \n\nLet's break it down:\n\n1. `import * as vscode from 'vscode';` \n\n   This line imports the entire vscode module for use in this file. The vscode module is a library provided by Visual Studio Code that contains the APIs necessary for extending the functionality of the Visual Studio Code editor. The `* as vscode` syntax means that all exported members of the vscode module will be available under the vscode namespace in this file. \n\n   You can learn more about the vscode API here: [VS Code API](https://code.visualstudio.com/api/references/vscode-api)\n\n2. `import axios from 'axios';` \n\n   This line imports the axios module. Axios is a popular, promise-based HTTP client for making asynchronous HTTP requests in JavaScript. It works in both the browser and in Node.js environments. \n\n   You can learn more about Axios here: [Axios](https://axios-http.com/docs/intro)\n\n3. `import { Remote } from './git.d';` \n\n   This line imports a specific exported member, `Remote`, from the `git.d` module located in the same directory as this file. The `Remote` is likely a type or interface definition related to a Git remote repository. \n\n   The file extension `.d` usually indicates a TypeScript declaration file, which is used to provide types and other information about JavaScript code to TypeScript. \n\n   You can learn more about TypeScript declaration files here: [TypeScript Declaration Files](https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html)\n\nAs for the architectural guidelines, since no specific ones were provided, the general principles of good software design should be followed, such as modularity (which is demonstrated in this code by the use of imports), readability, and maintainability."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "0",
      "value": "import * as vscode from 'vscode';\nimport axios from 'axios';\nimport { Remote } from './git.d';\n",
      "kind": 2,
      "metadata": {
        "id": 0,
        "type": "originalCode",
        "lineNumberBase": 1
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 3:15:18 PM PDT\n\nThe line of code you provided is written in TypeScript, which is a statically typed superset of JavaScript that adds optional types to the language. TypeScript is designed for the development of large applications and transcompiles to JavaScript.\n\nThis line of code is using ES6 (ECMAScript 2015) module syntax to import a module named `BoostConfiguration` from a file named `boostConfiguration` in the same directory.\n\nHere's a detailed explanation:\n\n- `import`: This is a reserved keyword in JavaScript (and thus in TypeScript) used to import functions, objects, or values from another module or file. \n\n- `{ BoostConfiguration }`: This is using the destructuring assignment syntax to import only the `BoostConfiguration` export from the `boostConfiguration` module. If the `boostConfiguration` module exported multiple things, this syntax allows you to import only the parts you need.\n\n- `from`: This is another reserved keyword used in conjunction with `import` to specify the path to the module or file from which to import.\n\n- `'./boostConfiguration'`: This is the path to the module file. The `./` indicates that the file is in the same directory as the current file. The file extension is omitted as per standard JavaScript and TypeScript conventions; it will automatically look for a `.ts` or `.js` file with the specified name.\n\nAs for the architectural guidelines, since you've mentioned there are no special architectural guidelines or constraints for this software project, there's not much to comment on in that regard for this line of code. It's a common and standard practice to import modules in JavaScript and TypeScript applications, and it doesn't seem to conflict with any general architectural principles.\n\nFor more information on `import` and `export` in JavaScript and TypeScript, you can refer to the following links:\n\n- The `import` statement on MDN Web Docs: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\n\n- Modules in TypeScript: https://www.typescriptlang.org/docs/handbook/modules.html"
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "1",
      "value": "import { BoostConfiguration } from './boostConfiguration';\n",
      "kind": 2,
      "metadata": {
        "id": 1,
        "type": "originalCode",
        "lineNumberBase": 2
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 3:15:47 PM PDT\n\nThe code you've provided is a single line of JavaScript code that imports a module named `boostLogging` from a file in the same directory named `boostLogging.js`.\n\nHere is a detailed explanation:\n\n- `import`: This is a reserved keyword in JavaScript, specifically in ES6 (ECMAScript 2015) and later versions. It is used to import functions, objects, or values from other files or modules into the current file. \n\n- `{ boostLogging }`: This is the name of the specific function, object, or value you want to import from the specified module. The curly braces `{}` are used for named exports. This means that in the `boostLogging.js` file, there is an export like `export const boostLogging = ...` or `export function boostLogging() {...}`.\n\n- `from './boostLogging'`: The `from` keyword is used to specify the path to the module you are importing from. The `.` before `/boostLogging` means that the file is in the same directory as the current file. If the file was in a subdirectory, the path might look something like `./subdirectory/boostLogging`. The `.js` extension is optional when importing JavaScript files.\n\n- `;`: This is a semicolon, used to denote the end of a statement in JavaScript.\n\nThis line of code does not include any specific algorithms; it is simply importing a module so that its exported functions, objects, or values can be used in the current file. \n\nFor more information on the `import` statement in JavaScript, you can visit the [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) which provides a comprehensive guide on JavaScript `import` and `export` statements."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "2",
      "value": "import { boostLogging } from './boostLogging';\n",
      "kind": 2,
      "metadata": {
        "id": 2,
        "type": "originalCode",
        "lineNumberBase": 3
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 3:16:13 PM PDT\n\nThe code you've provided is a single line of JavaScript code that imports a specific function or object from another module. This is a part of JavaScript ES6 syntax for modules.\n\nHere's the breakdown:\n\n1. `import`: This is a keyword in JavaScript that is used to import functions, objects, or values from other modules (which are essentially other JavaScript files). This allows for the modularization of code, where different parts of code can be written in different files and then brought together as needed.\n\n2. `{ fetchUserOrganizationsServiceRequest }`: The curly braces here are used to import a specific export from the module. This means that `fetchUserOrganizationsServiceRequest` is a named export in the `user_organizations` module. You can have multiple named exports in a module, and import them selectively using this syntax.\n\n3. `from './user_organizations';`: This specifies the module to import from. The `./` before `user_organizations` means that the module is in the same directory as the current file. The `.js` extension is assumed by default and hence not required.\n\nAs for the function or object being imported (`fetchUserOrganizationsServiceRequest`), without additional code or context, it's difficult to provide a specific explanation. However, based on the name, it seems to be a service request function that fetches user organizations. It's likely used to interact with a backend service to retrieve data about user organizations.\n\nThis line of code doesn't really involve any algorithms, it's more about code organization and modular design. \n\nFor more information about JavaScript ES6 modules, I'd recommend this MDN web docs article: \nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\n\nAs per the architectural guidelines, this code seems to follow good practices of modular design, as it's importing a specific function from another module. This allows for separation of concerns, where each module handles a specific functionality, and enhances code readability and maintainability."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "3",
      "value": "import { fetchUserOrganizationsServiceRequest } from './user_organizations';\n",
      "kind": 2,
      "metadata": {
        "id": 3,
        "type": "originalCode",
        "lineNumberBase": 4
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 3:16:42 PM PDT\n\nThis JavaScript code is a function that fetches a GitHub session for a user using Visual Studio Code's (VS Code) authentication API. It uses the async/await pattern, which is a way to handle asynchronous operations in JavaScript.\n\nHere's a step-by-step breakdown of what the code does:\n\n1. The function `fetchGithubSession` is exported, meaning it can be imported and used in other files. It takes one argument, `forceNewSession`, which is a boolean and defaults to `false` if not provided. It returns a Promise that resolves to a VS Code AuthenticationSession object.\n\n2. Two constants are declared: `GITHUB_AUTH_PROVIDER_ID` and `SCOPES`. The first is a string that identifies GitHub as the authentication provider. The second is an array of strings that represents the scopes (or permissions) that the application is requesting from the user's GitHub account.\n\n3. A try/catch block is used to handle any potential errors that might occur when trying to get the authentication session. The `getSession` method is called on `vscode.authentication` with three arguments: the GitHub authentication provider ID, the scopes, and an options object. The options object has two properties: `createIfNone` and `forceNewSession`. If `forceNewSession` is `true`, a new session will be created even if an existing one is available.\n\n4. If an error occurs during the `getSession` call, the catch block is executed. If the error message includes 'Git model not found', a custom error message is logged and thrown. If the error is of another type, a warning is logged, and the error message is stored in `errorMessage`.\n\n5. After the try/catch block, the code checks if a session was successfully retrieved or if an error message exists. If either of these conditions is true, a user-friendly error message is thrown.\n\n6. If no errors occurred and a session was successfully retrieved, the function returns the session.\n\nThe algorithm used in this code is straightforward: it tries to fetch an authentication session from VS Code's authentication API, handles potential errors, and returns the session if successful.\n\nThis code is specific to VS Code and its authentication API. For more information on VS Code's authentication API, you can visit the [VS Code API documentation](https://code.visualstudio.com/api/references/vscode-api#authentication).\n\nAs per the provided architectural guidelines, this code seems to be consistent as it doesn't mention any specific constraints or guidelines for this software project."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "4",
      "value": "\n\nexport async function fetchGithubSession(forceNewSession : boolean = false): Promise<vscode.AuthenticationSession> {\n    const GITHUB_AUTH_PROVIDER_ID = 'github';\n    // The GitHub Authentication Provider accepts the scopes described here:\n    // https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\n    const SCOPES = ['user:email', 'read:org'];\n  \n    let session = undefined;\n    let errorMessage = undefined;\n    try {\n        session = await vscode.authentication.getSession(GITHUB_AUTH_PROVIDER_ID, SCOPES,\n            { createIfNone: !forceNewSession, forceNewSession: forceNewSession});\n    } catch (err : any) {\n        if ((err.message as string).includes('Git model not found')) {\n            // don't show error UI popup since we may running in an API, batch mode operation\n            const errorMessage = \"Please verify local installation of Git software. Git is required for Visual Studio Code to access GitHub.\";\n            boostLogging.error(errorMessage, false);\n            throw new Error(errorMessage);\n        }\n        // otherwise rethrow the error\n        boostLogging.warn(`Error fetching GitHub session from Visual StudioCode: ${boostLogging.shouldLog(\"debug\")?(err as Error).stack:err}`, false);\n        errorMessage = err.message;\n    }\n    if (!session || errorMessage) {\n        const userError = \"Unable to retrieve GitHub session token from Visual Studio Code - please re-authorize GitHub and try again.\";\n        if (errorMessage) {\n            errorMessage = `${userError} ${errorMessage}`;\n        }\n        throw new Error(userError);\n    }\n    return session;\n}\n",
      "kind": 2,
      "metadata": {
        "id": 4,
        "type": "originalCode",
        "lineNumberBase": 7
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 3:17:17 PM PDT\n\nThis is a TypeScript function `getCurrentOrganization` that retrieves the current organization from a variety of potential sources. It is designed to be used within Visual Studio Code (VSCode) as an extension. It returns a Promise that resolves to a string, which is the name of the current organization. \n\nThe function takes an optional parameter `organizationCache` which is of type `vscode.ExtensionContext`. This parameter is used to cache the organization name to improve performance. \n\nThe function uses the following algorithm:\n\n1. It first checks if there is a cached value for the organization in the `globalState` of the `organizationCache`. If there is, it compares this cached value with the default organization in the `BoostConfiguration`. If they are not the same, it updates the default organization in the `BoostConfiguration` to keep them in sync. It then returns the organization.\n\n2. If the organization is not in the cache, it checks the `BoostConfiguration` for a default organization. If there is a default organization, it logs this and returns the organization.\n\n3. If the organization is not in the cache or the `BoostConfiguration`, it tries to get the organization from the current Github workspace by calling the `getCurrentGithubOrganizationFromWorkspace` function. If it finds an organization, it logs this and returns the organization.\n\n4. If the organization is still not found, it makes a service request to fetch the user organizations by calling the `fetchUserOrganizationsServiceRequest` function. If it gets a list of organizations and the list is not empty, it takes the first organization, logs this, and returns the organization.\n\n5. If there are no organizations in the list, it tries to get a personal organization from the `orgs` object. If there is no personal organization, it logs an error. It then returns the organization, which could be `undefined` if no organization was found.\n\nThis function uses the Nullish Coalescing Operator (`??`), which is a logical operator that returns its right-hand side operand when its left-hand side operand is `null` or `undefined`, and otherwise returns its left-hand side operand.\n\nFor more information on the Nullish Coalescing Operator, you can refer to the [Mozilla Developer Network documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator). For more information on Visual Studio Code extensions, you can refer to the [VSCode Extension API documentation](https://code.visualstudio.com/api)."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "5",
      "value": "\nexport async function getCurrentOrganization(organizationCache: vscode.ExtensionContext | undefined = undefined): Promise<string> {\n\n    // if we have a cached value, return it\n    let org: string = organizationCache?.globalState?.get(\"organization\") ?? \"\";\n    if (org) {\n        // if we have an extension cache org, then update the default boost config org as well to keep in sync\n        if (BoostConfiguration.defaultOrganization !== org) {\n            BoostConfiguration.defaultOrganization = org;\n        }\n        return org;\n    }\n\n    // otherwise, look in the config file\n    org = BoostConfiguration.defaultOrganization;\n    if (org) {\n        boostLogging.log(`Using User Settings Configured Organization: ${org}`);\n        return org;\n    }\n\n    // if we still don't have a value, try looking in the environment and getting the organization\n    // of the current repository\n    org = await getCurrentGithubOrganizationFromWorkspace();\n    if (org) {\n        boostLogging.log(`Using Workspace Organization: ${org}`);\n        return org;\n    }\n\n    let orgs = await fetchUserOrganizationsServiceRequest();\n    if (orgs && orgs.organizations && orgs.organizations.length > 0) {\n        org = orgs.organizations[0];\n        boostLogging.debug(`Using GitHub.com Organization: ${org}`);\n        return org;\n    }\n\n    org = orgs[\"personal\"];\n    if (!org) {\n        boostLogging.error(`No GitHub Organization or Personal Id found`);\n    }\n    return org;\n}\n",
      "kind": 2,
      "metadata": {
        "id": 5,
        "type": "originalCode",
        "lineNumberBase": 39
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 3:17:56 PM PDT\n\nThis JavaScript function `getCurrentGithubOrganizationFromWorkspace` is an asynchronous function that attempts to retrieve the name of the GitHub organization associated with the current workspace in Visual Studio Code (VS Code). It uses the Git extension API provided by VS Code to interact with the Git repositories in the workspace.\n\nHere's a step-by-step explanation of what the code does:\n\n1. The function first tries to get the Git extension API from VS Code by calling `vscode.extensions.getExtension('vscode.git')?.exports`. If the Git extension is not available, the function returns an empty string.\n\n2. If the Git extension is available, it then tries to get the Git API from the Git extension by calling `gitExtension.getAPI(1)`. If the Git API is not available, the function returns an empty string.\n\n3. If the Git API is available, it then tries to get the active repository from the Git API by accessing `gitApi.repositories[0]`. If there is no active repository or the `getRemotes` method is not available on the active repository, the function returns an empty string.\n\n4. If there is an active repository, it then tries to get the remote URLs associated with the repository by calling `await activeRepo.getRemotes()`. It then tries to find the 'origin' remote by searching through the returned remotes. If there is no 'origin' remote, the function returns an empty string.\n\n5. If the 'origin' remote is found, it then tries to get the fetch URL associated with the 'origin' remote by accessing `originRemote.fetchUrl`. If there is no fetch URL, the function returns an empty string.\n\n6. If the fetch URL is available, it then tries to extract the GitHub organization from the fetch URL by using a regular expression to match the pattern 'github.com[/:](\\w+)'. If the GitHub organization is not found in the fetch URL, the function returns an empty string.\n\n7. If the GitHub organization is found in the fetch URL, it then returns the GitHub organization.\n\nThis function uses the Promise-based asynchronous programming model inherent in modern JavaScript, which is widely used in Node.js and front-end JavaScript frameworks. It also uses the optional chaining operator `?.` and the nullish coalescing operator `??`, which are new features in ECMAScript 2020.\n\nFor more information on the Git extension API in VS Code, you can refer to the [VS Code API documentation](https://code.visualstudio.com/api/references/vscode-api)."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "6",
      "value": "  \nexport async function getCurrentGithubOrganizationFromWorkspace(): Promise<string> {\n    // Get the Git extension API.\n    const gitExtension = vscode.extensions.getExtension('vscode.git')?.exports;\n    if (!gitExtension) {\n      // Git extension is not available.\n      return '';\n    }\n\n    // Get the Git API from the Git extension.\n    const gitApi = gitExtension.getAPI(1);\n    if (!gitApi) {\n      // Git API is not available.\n      return '';\n    }\n\n    // Get the active repository.\n    const activeRepo = gitApi.repositories[0];\n    //if there is no remote set, getRemotes will no be available\n    if (!activeRepo || !activeRepo.getRemotes) {\n      // No active repository.\n      return '';\n    }\n\n    // Get the remote URL of the active repository.\n    const remotes = await activeRepo.getRemotes();\n    const originRemote = remotes.find((remote: Remote) => remote.name === 'origin');\n    if (!originRemote) {\n      // No 'origin' remote found.\n      return '';\n    }\n\n    // Extract the GitHub organization from the remote URL.\n    const remoteUrl = originRemote.fetchUrl;\n    if (!remoteUrl) {\n      // Remote URL is not available.\n      return '';\n    }\n\n    // Use a regular expression to match the GitHub organization from the remote URL.\n    const match = remoteUrl.match(/github\\.com[/:](\\w+)/);\n    if (!match || match.length < 2) {\n      // GitHub organization not found in the remote URL.\n      return '';\n    }\n\n    // Return the GitHub organization.\n    return match[1];\n}\n",
      "kind": 2,
      "metadata": {
        "id": 6,
        "type": "originalCode",
        "lineNumberBase": 80
      }
    }
  ],
  "metadata": {
    "defaultDir": ".boost",
    "sourceFile": "./src/authorization.ts"
  }
}