{
  "cells": [
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "application/vnd.code.notebook.error",
              "data": "Error: Boost Code Explanation failed: Boost Cloud Service could not be resolved. Please check your internet connection, and try again."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "0",
      "value": "import { BoostNotebook, NOTEBOOK_EXTENSION } from './jupyter_notebook';\n",
      "kind": 2,
      "metadata": {
        "id": 0,
        "type": "originalCode",
        "lineNumberBase": -1
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "application/vnd.code.notebook.error",
              "data": "Error: Boost Code Explanation failed: Boost Cloud Service could not be resolved. Please check your internet connection, and try again."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "1",
      "value": "import * as fs from 'fs';\nimport * as path from 'path';\nimport * as crypto from 'crypto';\nimport { convertNotebookToHTML } from './convert_html';\n",
      "kind": 2,
      "metadata": {
        "id": 1,
        "type": "originalCode",
        "lineNumberBase": 3
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "application/vnd.code.notebook.error",
              "data": "Error: Boost Code Explanation failed: Boost Cloud Service could not be resolved. Please check your internet connection, and try again."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "2",
      "value": "import puppeteer from 'puppeteer';\n\n\nexport async function generatePDFforNotebook(boostNotebookPath : string, baseFolderPath : string) : Promise<string> {\n    return new Promise<string> (async (resolve, reject) => {\n        try {\n            const pdfFilename = boostNotebookPath.replace(NOTEBOOK_EXTENSION, '.pdf');\n\n            const boostNotebook = new BoostNotebook();\n            boostNotebook.load(boostNotebookPath);\n            await generatePdfFromJson(boostNotebook, boostNotebookPath, baseFolderPath, pdfFilename);\n            resolve(pdfFilename);\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n",
      "kind": 2,
      "metadata": {
        "id": 2,
        "type": "originalCode",
        "lineNumberBase": 7
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "application/vnd.code.notebook.error",
              "data": "Error: Boost Code Explanation failed: Boost Cloud Service could not be resolved. Please check your internet connection, and try again."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "3",
      "value": "\nasync function generatePdfFromJson(boostNotebook: BoostNotebook, notebookPath : string, baseFolderPath : string, outputPath: string): Promise<void> {\n    return new Promise<void> (async (resolve, reject) => {\n        try {\n                        // Generate a random filename\n            const randomFilename = crypto.randomBytes(8).toString('hex') + '.html';\n\n            // Write the HTML to a temporary file with the random filename\n            const tempHtmlPath = path.join(baseFolderPath, randomFilename);\n            const normalizedTempHtmlPath = path.normalize(tempHtmlPath);\n            await convertNotebookToHTML(boostNotebook, notebookPath, baseFolderPath, normalizedTempHtmlPath);\n\n            try {\n                // convert the html file to pdf using puppeteer\n                const browser = await puppeteer.launch();\n                const page = await browser.newPage();\n                // convert the file path to a URL\n                const url = `file://${tempHtmlPath}`;\n                await page.goto(url, { waitUntil: 'networkidle0' });\n                await page.pdf({ path: outputPath});\n\n                await browser.close();\n\n            } finally {\n                // delete the temporary html file so we don't leak the file in the user's workspace\n                // this means debugging failures will be harder to diagnose, but it's better than alternative\n                // we can use a debug flag in future to keep the file around for debugging\n                fs.unlinkSync(normalizedTempHtmlPath);\n            }\n\n            resolve();\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n",
      "kind": 2,
      "metadata": {
        "id": 3,
        "type": "originalCode",
        "lineNumberBase": 22
      }
    }
  ],
  "metadata": {
    "defaultDir": ".boost",
    "sourceFile": "./src/convert_pdf.ts"
  }
}