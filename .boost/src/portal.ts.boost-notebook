{
  "cells": [
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 5:57:03 PM PDT\n\nThis code is written in TypeScript, a statically typed superset of JavaScript that adds types to the language. It is commonly used for developing large scale applications, especially on the server side.\n\nLet's break it down:\n\n1. `import * as vscode from 'vscode';`\nThis line imports the entire Visual Studio Code extension API module, allowing the code to interact with the Visual Studio Code editor. The `* as vscode` syntax means that all exported members of the 'vscode' module will be available under the 'vscode' namespace. \n\nMore information about the vscode API can be found here: https://code.visualstudio.com/api\n\n2. `import axios from 'axios';`\nThis line imports the Axios library. Axios is a promise-based HTTP client for the browser and Node.js. It has a simple API for making asynchronous HTTP requests and it supports promises by default. \n\nMore information about Axios can be found here: https://github.com/axios/axios\n\n3. `import { BoostConfiguration } from './boostConfiguration';`\nThis line imports a specific exported member, `BoostConfiguration`, from the local module located at './boostConfiguration'. `BoostConfiguration` is not defined in this code snippet, but it's likely a class or a function that is being used to configure something in the rest of the code.\n\nAs for the architectural guidelines, since there are no specific rules mentioned, we can only assume that the code follows general good practices. These might include modular design (the code is split into separate modules), separation of concerns (each module has a specific purpose), and code reuse (importing modules instead of rewriting functionality).\n  \nKeep in mind that without more context or specific guidelines, it's hard to provide a detailed architectural analysis."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "0",
      "value": "import * as vscode from 'vscode';\nimport axios from 'axios';\nimport { BoostConfiguration } from './boostConfiguration';\n",
      "kind": 2,
      "metadata": {
        "id": 0,
        "type": "originalCode",
        "lineNumberBase": 1
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 5:57:37 PM PDT\n\nThis piece of code is written in JavaScript and uses the ES6 (ECMAScript 6) syntax. It is importing two functions, `fetchGithubSession` and `getCurrentOrganization`, from a module named `authorization`. \n\nHere's a breakdown of the code:\n\n`import`: This is a reserved keyword in JavaScript used to import functions, objects, or values from other files or modules. \n\n`{ fetchGithubSession, getCurrentOrganization }`: These are the specific items being imported from the `authorization` module. They are enclosed in curly braces because they are named exports from the module. This means that these functions are exported with the exact same names in the `authorization` module.\n\n`from`: This is another reserved keyword in JavaScript used in conjunction with `import` to specify the path of the module from which the functions, objects, or values are being imported.\n\n`'./authorization'`: This is the path of the module from which the functions are being imported. The `./` before the module name indicates that the module is in the same directory as the current file.\n\nThe code does not provide any specific algorithms, as it's only importing functions from another module. The underlying algorithms would be in the `fetchGithubSession` and `getCurrentOrganization` functions in the `authorization` module.\n\nAs for the architectural guidelines, since there are no additional special architectural guidelines or constraints provided for this software project, we can't make any specific comments or recommendations related to them. However, it's worth noting that modular design is a good practice in software engineering, as it promotes separation of concerns, reusability, and maintainability. This code is following that principle by importing functions from a separate module.\n\nFor more information about JavaScript modules and import/export syntax, you can refer to the following resources:\n\n- [JavaScript Modules: A Beginnerâ€™s Guide](https://www.freecodecamp.org/news/javascript-modules-a-beginner-s-guide-783f7d7a5fcc/)\n- [JavaScript import statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import)\n- [ES6 In Depth: Modules](https://hacks.mozilla.org/2015/08/es6-in-depth-modules/)"
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "1",
      "value": "import { fetchGithubSession, getCurrentOrganization } from './authorization';\n",
      "kind": 2,
      "metadata": {
        "id": 1,
        "type": "originalCode",
        "lineNumberBase": 2
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 5:57:59 PM PDT\n\nThe code you've provided is a single line of JavaScript (specifically, it's using ES6 syntax) that imports a module named `BoostExtension` from a file named `BoostExtension.js` in the same directory.\n\nLet's break down this line of code:\n\n- `import`: This is a keyword in JavaScript ES6 that allows you to import functions, objects, or values from another module or file. This is part of the ES6 module system.\n\n- `{ BoostExtension }`: This is the specific item that you want to import from the module. The `{}` brackets indicate that `BoostExtension` is a named export from the module. If the module used `export default`, you wouldn't need the `{}` brackets.\n\n- `from './BoostExtension'`: This specifies the path to the module you're importing from. The `.` indicates that the module is in the same directory as the current file. `BoostExtension` is the name of the file (the `.js` extension is assumed and thus not required).\n\nAs for the algorithm, this line of code simply tells the JavaScript interpreter to go to the specified file, find the specified export, and make it available in the current file under the specified name.\n\nThe code doesn't conflict with any architectural guidelines since there are no special constraints or guidelines provided for the software project.\n\nFor more information about ES6 import and export, you can check this link: [MDN Web Docs - import](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import)"
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "2",
      "value": "import { BoostExtension } from './BoostExtension';\n",
      "kind": 2,
      "metadata": {
        "id": 2,
        "type": "originalCode",
        "lineNumberBase": 3
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 5:58:23 PM PDT\n\nThis is a JavaScript (or TypeScript) code snippet that imports specific elements from a module named 'user_organizations'. The code uses the ES6 (ECMAScript 6) import statement which is used to import functions, objects or values from an external module or file.\n\nThe imported elements are:\n\n1. `fetchUserOrganizationsServiceRequest`: This could be a function that fetches the organizations a user belongs to. The name suggests that it sends a service request to retrieve this data, possibly from a server or a database. \n\n2. `UserOrgs`: This could be a JavaScript object, a class, or a function. Without more context, it's hard to say what exactly this is. However, based on the name, it could be a model or an object that represents the user's organizations in the application.\n\nSince the code snippet is very short and we don't have the code of the 'user_organizations' module, it's hard to say what algorithms are used. However, the fetchUserOrganizationsServiceRequest function might use the HTTP protocol to communicate with a server and retrieve the data. It might use the GET method to retrieve the data, and it might use the Promise object to handle the asynchronous operation.\n\nHere is a link for more education and background on the ES6 import statement: [MDN Web Docs - import](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import)\n\nSince there are no special architectural guidelines or constraints for this software project, I can't comment on the consistency or conflicts between the code and the guidelines. However, this code appears to follow good practices for modular design in JavaScript, where different functionalities are separated into different modules to keep the code organized and maintainable."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "3",
      "value": "import { fetchUserOrganizationsServiceRequest, UserOrgs } from './user_organizations';\n",
      "kind": 2,
      "metadata": {
        "id": 3,
        "type": "originalCode",
        "lineNumberBase": 4
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 5:58:46 PM PDT\n\nThe provided code is quite simple and short, so there's not a lot to explain. However, I'll break it down as much as possible. \n\nThis code is written in JavaScript, specifically using ES6 syntax. It's utilizing a feature of ES6 called \"import\". \n\nThe \"import\" statement is used to import functions, objects or values that have been exported from an external module, another script, or file. This is part of the module system in ES6, which is a way to include functionality from different files in your project.\n\nIn this case, it's importing a constant named `NOTEBOOK_TYPE` from a file named `jupyter_notebook.js` (or `jupyter_notebook.ts` if it's a TypeScript project) in the same directory as the current file. \n\nThe file `jupyter_notebook` is probably defining what type of notebook is being used in a Jupyter environment. Jupyter is an open-source project that supports interactive data science and scientific computing across all programming languages. \n\nAs for the algorithm used, there's not really an algorithm in this snippet. It's just a single statement that imports a constant from another file. \n\nHowever, the process of importing in JavaScript involves the following steps:\n\n1. The JavaScript engine checks if the module specified in the import statement is in the module cache.\n2. If it's not in the cache, it will go to the specified path and read the file.\n3. The engine parses the file and executes the code, storing any exports in the module cache.\n4. The import statement then retrieves the specific exports from the module cache and makes them available in the current scope under the names specified in the import statement.\n\nFor more details on the import statement in JavaScript, you can check out this link: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\n\nAs per your architectural guidelines, this code does not seem to violate any principles or constraints. However, without the broader context of the project, it's hard to say definitively."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "4",
      "value": "import { NOTEBOOK_TYPE } from './jupyter_notebook';\n",
      "kind": 2,
      "metadata": {
        "id": 4,
        "type": "originalCode",
        "lineNumberBase": 5
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 5:59:06 PM PDT\n\nThe provided code is quite short and simple. It's written in JavaScript, specifically using ECMAScript 6 (ES6) syntax, and it's part of a module system (probably Node.js or a front-end framework like React or Angular).\n\nThe code is importing a module or function named `boostLogging` from a file in the same directory named `boostLogging.js`. \n\n```javascript\nimport { boostLogging } from './boostLogging';\n```\n\nThis line of code is using ES6 import syntax to import specific exports from another module. In this case, the `boostLogging` export from the `boostLogging` module is being imported. \n\nThe `boostLogging` function or module is probably used to enhance, configure, or control logging in the application. However, without seeing the `boostLogging` code, it's hard to provide more specifics.\n\nAs for the algorithm used, there isn't one visible in this code snippet. Import statements don't typically involve algorithms; they're used to include dependencies and functionality from other parts of the codebase.\n\nRegarding architectural guidelines, this code snippet doesn't provide enough context to determine whether it's consistent with or conflicts with any specific guidelines. However, it is a common practice in modular JavaScript applications to separate concerns into different files and import them where needed, so this code likely follows good software design principles.\n\nFor more information on ES6 import syntax, you can refer to this link: [MDN Web Docs - import](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import)"
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "5",
      "value": "import { boostLogging } from './boostLogging';\n",
      "kind": 2,
      "metadata": {
        "id": 5,
        "type": "originalCode",
        "lineNumberBase": 6
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 5:59:36 PM PDT\n\nThis is a very simple piece of JavaScript code. It is importing a function named `mapError` from a module/file named `error`. \n\nThe `import` statement is used to import bindings that are exported by another module. Imported modules are in strict mode whether you declare them as such or not. The `import` statement cannot be used in embedded scripts unless such script has a `type=\"module\"`. Bindings imported are called live bindings because they are updated by the module that exported the binding.\n\nIn the context of this code:\n\n`import { mapError } from './error';`\n\n`mapError` is a named export from the `error` module. The `error` module is located in the same directory as the file containing this import statement, as indicated by the `./` before the module name. The `mapError` function can now be used in the file where this import statement is written.\n\nWithout more context, it's hard to say what exactly `mapError` does. However, based on the name, it's reasonable to assume that it's a function that somehow \"maps\" errors - perhaps transforming them in some way or associating them with certain handling logic.\n\nAs for the algorithm used, this single line of code doesn't implement an algorithm per se. It's merely importing a function for use. The algorithm or logic would be contained within the `mapError` function in the `error` module.\n\nHere are some references for further reading:\n1. [MDN Web Docs: import statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import)\n2. [JavaScript Modules: A Beginnerâ€™s Guide](https://medium.freecodecamp.org/javascript-modules-a-beginner-s-guide-783f7d7a5fcc)\n\nAs for the architectural guidelines, this code is too small and context-free to make any definitive statements about its consistency or conflicts with any architectural guidelines. However, the use of module imports is a common practice in structured and maintainable codebases, so this line of code is likely in line with good architectural practices."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "6",
      "value": "import { mapError } from './error';\n",
      "kind": 2,
      "metadata": {
        "id": 6,
        "type": "originalCode",
        "lineNumberBase": 7
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 6:00:09 PM PDT\n\nThis code defines a function named `serviceEndpoint` that returns a string. This function does not take any arguments. The function is used to determine the URL of the service endpoint based on the current cloud service stage, which is stored in `BoostConfiguration.cloudServiceStage`.\n\nThe function uses a `switch` statement to check the value of `BoostConfiguration.cloudServiceStage`. The `switch` statement is a control flow statement that allows the code to execute different code blocks based on the value of a variable or expression. In this case, it checks the value of `BoostConfiguration.cloudServiceStage`.\n\n- If `BoostConfiguration.cloudServiceStage` is \"local\", the function returns the URL for the local development environment: 'http://127.0.0.1:8000/customer_portal'.\n- If `BoostConfiguration.cloudServiceStage` is \"dev\", the function returns the URL for the development environment in the cloud: 'https://hry4lqp3ktulatehaowyzhkbja0mkjob.lambda-url.us-west-2.on.aws/'.\n- If `BoostConfiguration.cloudServiceStage` is \"test\", the function returns the URL for the test environment in the cloud: 'https://kpxtpi5swejjt6yiflcpspchim0wrhaa.lambda-url.us-west-2.on.aws/'.\n- If `BoostConfiguration.cloudServiceStage` is \"staging\" or \"prod\", or any other value not previously listed, the function returns the URL for the production environment in the cloud: 'https://roxbi254sch3yijt7tqbz4s7jq0jxddr.lambda-url.us-west-2.on.aws/'.\n\nThis function allows the application to dynamically connect to different service endpoints based on the current stage of the cloud service.\n\nFor more information on the `switch` statement in JavaScript, you can refer to this link: [JavaScript Switch Statement - W3Schools](https://www.w3schools.com/js/js_switch.asp)"
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "7",
      "value": "\n\nfunction serviceEndpoint(): string {\n    switch (BoostConfiguration.cloudServiceStage)\n    {\n        case \"local\":\n            return 'http://127.0.0.1:8000/customer_portal';\n        case 'dev':\n            return 'https://hry4lqp3ktulatehaowyzhkbja0mkjob.lambda-url.us-west-2.on.aws/';\n        case \"test\":\n            return 'https://kpxtpi5swejjt6yiflcpspchim0wrhaa.lambda-url.us-west-2.on.aws/';\n        case 'staging':\n        case 'prod':\n        default:\n            return 'https://roxbi254sch3yijt7tqbz4s7jq0jxddr.lambda-url.us-west-2.on.aws/';\n    }\n}\n",
      "kind": 2,
      "metadata": {
        "id": 7,
        "type": "originalCode",
        "lineNumberBase": 10
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 6:00:46 PM PDT\n\nThis code defines a simple custom error class in TypeScript named `BoostAuthenticationException`. It extends the built-in JavaScript `Error` class, which means it inherits all the properties and methods of the `Error` class.\n\nHere's a breakdown of the code:\n\n1. `class BoostAuthenticationException extends Error`: This line is declaring a new class `BoostAuthenticationException` that extends (or inherits from) the built-in JavaScript `Error` class. This means that `BoostAuthenticationException` will have all the properties and methods of `Error`, and can also have its own additional properties and methods.\n\n2. `constructor(message?: string)`: This is the constructor method for the class. The constructor method is a special method for creating and initializing an object created with a class. Here, it takes one optional parameter `message` of type `string`. The `?` means that the parameter is optional, so an object of this class can be created with or without a message.\n\n3. `super(message);`: This line is calling the constructor of the parent `Error` class, passing in the `message` parameter. This allows the `Error` class to handle the provided message.\n\n4. `this.name = 'BoostAuthenticationException';`: This line sets the `name` property of the object to be `'BoostAuthenticationException'`. This can be useful when handling errors, as it allows you to distinguish between different types of errors based on their name property.\n\nThis is a simple example of Object-Oriented Programming (OOP) in TypeScript. OOP is a programming paradigm based on the concept of \"objects\", which can contain data and code: data in the form of fields, and code in the form of methods. Inheritance is one of the core concepts in OOP, and TypeScript supports it with the `extends` keyword.\n\nFor more information, you can check the following resources:\n- [TypeScript Classes](https://www.typescriptlang.org/docs/handbook/classes.html)\n- [JavaScript Error class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error)\n- [Object-Oriented Programming in TypeScript](https://www.typescriptlang.org/docs/handbook/2/classes.html)"
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "8",
      "value": "\nclass BoostAuthenticationException extends Error {\n    constructor(message?: string) {\n      super(message);\n      this.name = 'BoostAuthenticationException';\n    }\n}\n",
      "kind": 2,
      "metadata": {
        "id": 8,
        "type": "originalCode",
        "lineNumberBase": 26
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 6:01:15 PM PDT\n\nThis JavaScript code is an asynchronous function named `preflightCheckForCustomerStatus`. It is exported, meaning it can be used in other modules. This function is used to check the status of a customer's account before proceeding with further operations. \n\nThe function accepts two arguments: `context` and `extension`. The `context` argument is of type `vscode.ExtensionContext` which is a representation of the extension's runtime environment. The `extension` argument is an instance of the `BoostExtension` class.\n\nThe function starts by calling another asynchronous function named `updateBoostStatusColors` and awaits its result. This function is expected to return the status of a customer's account. The function `updateBoostStatusColors` is called with three arguments: `context`, `undefined`, and `extension`. The `undefined` value is likely a placeholder for a parameter that is not needed in this context.\n\nThe result of the `updateBoostStatusColors` function is stored in the `accountStatus` variable. If `accountStatus` is either 'paid', 'trial', or 'active', the function ends and returns `undefined`. \n\nIf `accountStatus` is not one of the three aforementioned statuses, it logs an error message using the `boostLogging.error` method with a message indicating that access to the Boost Cloud Service is not possible due to the account status. It is also throwing an error, specifically a `BoostAuthenticationException`, with the same message. \n\nThis function appears to be a part of a larger cloud-based application, specifically an extension for Visual Studio Code (as indicated by the `vscode.ExtensionContext` type). It is likely used in a middleware or pre-processing step to ensure that the user's account is in a valid state before allowing them to proceed.\n\nThe specific algorithms used in this code are not explicitly mentioned, but it appears to be a simple conditional check based on the return value of a function call. \n\nFor more information on Visual Studio Code extension development, you can refer to the official documentation here: [VSCode Extensions Documentation](https://code.visualstudio.com/api/references/vscode-api)"
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "9",
      "value": "\nexport async function preflightCheckForCustomerStatus(context: vscode.ExtensionContext, extension : BoostExtension) {\n    const accountStatus = await updateBoostStatusColors(context, undefined, extension);\n    if (accountStatus === 'paid' || accountStatus === 'trial' || accountStatus === 'active') {\n        return;\n    } else {\n        boostLogging.error(`Unable to access Boost Cloud Service due to account status. Please check your account settings.`, false);\n        throw new BoostAuthenticationException(`Unable to access Boost Cloud Service due to account status. Please check your account settings.`);\n    }\n}\n",
      "kind": 2,
      "metadata": {
        "id": 9,
        "type": "originalCode",
        "lineNumberBase": 33
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 6:01:50 PM PDT\n\nThis code is written in TypeScript and is used in a Visual Studio Code (VSCode) extension. It exports an asynchronous function called `getCustomerStatus` that fetches the status of a customer from a remote service. Here's a detailed breakdown of the code:\n\n1. `let session = await fetchGithubSession(!context);` - This line fetches a GitHub session, which likely includes authentication tokens or session data. The `!context` argument seems to be a mistake, as it negates the context object. It should probably be `context`.\n\n2. `let organization = await getCurrentOrganization(context);` - This line fetches the current organization, likely the GitHub organization of the current user.\n\n3. The `if` and `else if` statements check if the organization and session are valid. If not, it logs a warning message using `boostLogging.warn`.\n\n4. The `payload` object is created with session and organization data to be sent to the remote service.\n\n5. The `headers` object is created with a `User-Agent` header, which identifies the software making the HTTP request.\n\n6. A `try-catch` block is used to handle any errors that might occur during the HTTP request.\n\n7. Inside the `try` block, it first checks if a fault injection condition is met. If so, it sends a GET request to a URL that appears to simulate a service error.\n\n8. Then, it sends a POST request to the service endpoint with the payload and headers. This is done using the `axios` library, which is a promise-based HTTP client for the browser and Node.js.\n\n9. If the response data contains an error, it throws an error with a custom message.\n\n10. The result of the function is the data from the response, or if an error occurred, the error is mapped using the `mapError` function and returned.\n\nThe main algorithm used in this code is the `axios.post` function, which uses the Promise API to send an asynchronous HTTP request and handle the response. More information about the `axios` library can be found at https://axios-http.com/.\n\nThe code doesn't appear to conflict with any architectural guidelines or constraints, but the use of `!context` might be a mistake and should be reviewed."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "10",
      "value": "\n\nexport async function getCustomerStatus(context: vscode.ExtensionContext): Promise<any> {\n    let session = await fetchGithubSession(!context);       // get the session\n    let organization = await getCurrentOrganization(context);\n    if (!organization) {\n        boostLogging.warn(\"Unable to identify current organization\", false);\n    } else if (!session) {\n        boostLogging.warn(\"Unable to identify current GitHub session\", false);\n    }\n    let payload = {\n        \"session\": session.accessToken,\n        \"organization\": organization,\n    };\n    const headers = {\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        'User-Agent': `Boost-VSCE/${BoostConfiguration.version}`\n    };\n\n    try {\n        if (BoostConfiguration.serviceFaultInjection > 0 &&\n            (Math.floor(Math.random() * 100) < BoostConfiguration.serviceFaultInjection)) {;\n            boostLogging.debug(`Injecting fault into service request fetching organizations`);\n            await axios.get('https://serviceFaultInjection/synthetic/error/');\n        }\n\n        const result = await axios.post(serviceEndpoint(), payload, { headers } );\n        if (result && result.data && result.data.error) { // if we have an error, throw it - this is generally happens with the local service shim\n            throw new Error(`Boost Service failed with a network error: ${result.data.error}`);\n        }\n        return result.data;\n    } catch (err : any) {\n        return mapError(err);\n    }\n}\n",
      "kind": 2,
      "metadata": {
        "id": 10,
        "type": "originalCode",
        "lineNumberBase": 44
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 6:02:25 PM PDT\n\nThis is a TypeScript function that is part of a Visual Studio Code (VSCode) extension. It's used to register a command in the VSCode's command palette, specifically to open a customer portal URL in the user's default web browser.\n\nHere's a detailed explanation:\n\n1. `export function registerCustomerPortalCommand(context: vscode.ExtensionContext) {`: This line declares a function named `registerCustomerPortalCommand` that accepts one argument `context` of type `vscode.ExtensionContext`. `vscode.ExtensionContext` is an interface that provides properties and methods related to the context in which the extension is executed.\n\n2. `context.subscriptions.push(`: This line pushes a disposable resource to an array of subscriptions that are disposed of when the extension is deactivated. This is a way to manage resources such as timers, event listeners, or subscriptions in an extension.\n\n3. `vscode.commands.registerCommand(NOTEBOOK_TYPE + '.customerPortal', async () => {`: This line registers a command with the VSCode command palette. The command ID is a string that concatenates the value of `NOTEBOOK_TYPE` with the string '.customerPortal'. The second argument is a callback function that is executed when the command is run.\n\n4. `let response = await getCustomerStatus(context);`: This line calls an asynchronous function `getCustomerStatus` with `context` as an argument. It waits for the promise to resolve and assigns the resolved value to `response`.\n\n5. `url = response['portal_url'];`: This line retrieves the 'portal_url' property from the `response` object and assigns it to the `url` variable.\n\n6. `vscode.env.openExternal(vscode.Uri.parse(url));`: This line opens the URL in the user's default web browser. It uses VSCode's `openExternal` method, which takes a `vscode.Uri` object. The `vscode.Uri.parse(url)` part converts the `url` string to a `vscode.Uri` object.\n\n7. The `catch` block is used to handle any errors that might occur during the execution of the `try` block. If an error occurs, it logs the error message using `boostLogging.error` and terminates the function.\n\nFor more details on how to develop a VSCode extension, you can refer to the [VSCode Extension API](https://code.visualstudio.com/api/references/vscode-api) documentation."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "11",
      "value": "\nexport function registerCustomerPortalCommand(context: vscode.ExtensionContext) {\n    context.subscriptions.push(\n        vscode.commands.registerCommand(NOTEBOOK_TYPE + '.customerPortal', async () => {\n            let url;\n            try {\n                let response = await getCustomerStatus(context);\n                url = response['portal_url'];\n            } catch (err : any) {\n                boostLogging.error(`Unable to launch customer portal: ${err.message}. Please contact Polyverse Boost Support`, true);\n                return;\n            }\n            vscode.env.openExternal(vscode.Uri.parse(url));\n        })  \n    );\n}\n",
      "kind": 2,
      "metadata": {
        "id": 11,
        "type": "originalCode",
        "lineNumberBase": 78
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 6:03:02 PM PDT\n\nThis JavaScript code is part of a Visual Studio Code (VSCode) extension and is designed to update the status colors of a \"Boost\" extension based on the user's account status. It uses async/await syntax to handle asynchronous operations and a switch statement to handle different account statuses. \n\nThe function `updateBoostStatusColors` is exported and is async, meaning it returns a Promise. It takes three arguments: `context`, `_` (an unused argument), and `closure` which is an instance of the `BoostExtension`. The function returns a string representing the status of the user's account.\n\nThe function begins by checking if the `statusBar` property of the `closure` object is undefined. If it is, the function returns the string \"unknown\".\n\nNext, it calls the asynchronous function `getCustomerStatus(context)` and waits for it to resolve. This function presumably makes a request to a server to retrieve the status of the customer's account.\n\nIf the `accountInfo` retrieved is either undefined or an instance of Error, it logs an error message, sets the `statusBar` color and background color to represent an error state, sets the `statusBar` tooltip to a specific error message, and returns either \"unknown\" or the error message.\n\nIf `accountInfo` is not an error, the function enters a switch statement where it handles different possible account statuses: 'unregistered', 'expired', 'suspended', 'paid', 'trial', 'active', and a default case. For each status, it sets the `statusBar` color and background color to represent the status, sets the `statusBar` tooltip to a relevant message, and logs the status. The function then returns the account status.\n\nThe `vscode.ThemeColor` class is used to create new color instances for the `statusBar`. Theme colors are named colors in VSCode that will be resolved to a color value depending on the current color theme in use.\n\nThis code does not appear to use any specific algorithms, but it does use the async/await pattern for handling asynchronous operations and a switch statement for handling multiple possible account statuses.\n\nFor more information on async/await in JavaScript, you can refer to this link: [Async/await - Javascript.info](https://javascript.info/async-await)\n\nFor more information on switch statements in JavaScript, you can refer to this link: [Switch - Javascript.info](https://javascript.info/switch)\n\nFor more information on developing extensions for VSCode, you can refer to this link: [VSCode Extensions Documentation](https://code.visualstudio.com/api)"
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "12",
      "value": "\nconst gitHubAuthorizationFailureToolTip = 'Unable to access your current account status. Please check your GitHub Authorization status, then network connection status.';\n\nexport async function updateBoostStatusColors(context: vscode.ExtensionContext, _: any, closure: BoostExtension) : Promise<string> {\n    if (closure.statusBar === undefined) {\n        return \"unknown\";\n    }\n\n    const accountInfo = await getCustomerStatus(context);\n\n    if (accountInfo === undefined || accountInfo instanceof Error) {\n        if (!accountInfo) {\n            boostLogging.log(`Unable to retrieve current customer status.`);\n        } else {\n            boostLogging.log(`Unable to retrieve current customer status. ${accountInfo}`);\n        }\n        closure.statusBar.color = new vscode.ThemeColor('statusBarItem.errorForeground');\n        closure.statusBar.backgroundColor = new vscode.ThemeColor('statusBarItem.errorBackground');\n        closure.statusBar.tooltip = gitHubAuthorizationFailureToolTip;\n        if (!accountInfo) {\n            return \"unknown\";\n        } else {\n            return accountInfo.message;\n        }\n    } else {\n        switch (accountInfo['status']) {\n        case 'unregistered':\n            closure.statusBar.color = new vscode.ThemeColor('statusBarItem.errorForeground');\n            closure.statusBar.backgroundColor = new vscode.ThemeColor('statusBarItem.errorBackground');\n            closure.statusBar.tooltip = 'Cannot find your Polyverse Boost account. Please verify your GitHub email is authorized in Visual Studio Code and retry.';\n            break;\n        case 'expired':\n            closure.statusBar.color = new vscode.ThemeColor('statusBarItem.errorForeground');\n            closure.statusBar.backgroundColor = new vscode.ThemeColor('statusBarItem.errorBackground');\n            closure.statusBar.tooltip = 'Your Boost trial has expired. Please visit the Account Dashboard to update payment info.';\n            break;\n        case 'suspended':\n            closure.statusBar.color = new vscode.ThemeColor('statusBarItem.errorForeground');\n            closure.statusBar.backgroundColor = new vscode.ThemeColor('statusBarItem.errorBackground');\n            closure.statusBar.tooltip = 'Your account payment is expired. Please visit the Account Dashboard to update payment info.';\n            break;\n        case 'paid':\n            closure.statusBar.color = new vscode.ThemeColor('statusBarItem.prominentForeground');\n            closure.statusBar.backgroundColor = new vscode.ThemeColor('statusBarItem.prominentBackground');\n            closure.statusBar.tooltip = 'Your account is an active paid subscription.';\n            break;\n        case 'trial':\n        case 'active':\n        default:\n            closure.statusBar.color = new vscode.ThemeColor('statusBarItem.warningForeground');\n            closure.statusBar.backgroundColor = new vscode.ThemeColor('statusBarItem.warningBackground');\n            closure.statusBar.tooltip = 'Your account is an active trial subscription. Please visit the Account Dashboard to add payment info.';\n            break;\n        }\n        boostLogging.log(`Customer Status refresh: ${closure.statusBar.tooltip}`);\n        return accountInfo['status'];\n    }\n}\n",
      "kind": 2,
      "metadata": {
        "id": 12,
        "type": "originalCode",
        "lineNumberBase": 96
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 6:03:47 PM PDT\n\nThis code is written in TypeScript, a typed superset of JavaScript, and seems to be part of a Visual Studio Code (VSCode) extension. It's using the VSCode Extension API to create a status bar item and bind some commands to it.\n\nHere's a detailed explanation:\n\n1. Two constant strings `pendingBoostStatusBarText` and `errorBoostStatusBarText` are declared. These are the messages that will be shown in the status bar of VSCode when the boost status is pending or in error respectively.\n\n2. An asynchronous function `setupBoostStatus` is exported. This function takes two arguments: `context` and `closure`. `context` is of type `vscode.ExtensionContext`, which provides properties and methods that represent VSCode's extension host. `closure` appears to be an instance of a `BoostExtension` class (or similar), which is not defined in the provided code.\n\n3. Inside `setupBoostStatus`, a new status bar item is created using `vscode.window.createStatusBarItem`. This item is aligned to the left and has a priority of 10 (lower numbers mean higher priority).\n\n4. The new status bar item is assigned to `closure.statusBar`, and its text, color, and background color are set. The color and background color are theme-dependent, which means they will change according to the user's current VSCode theme. The status bar item is then made visible with `show()`.\n\n5. The function `refreshBoostOrgStatus` is called with `context` and `closure` as arguments. This function is not defined in the provided code, but it likely updates the status bar item based on the current status of the \"boost organization\". This function is awaited, meaning `setupBoostStatus` will not continue until `refreshBoostOrgStatus` has completed.\n\n6. A new command is registered using `vscode.commands.registerCommand`. The command's name is `NOTEBOOK_TYPE + '.boostStatus'`, and its callback function is `boostStatusCommand.bind(closure)`. This means that when the command is executed, `boostStatusCommand` will be called with `closure` as its `this` context.\n\n7. The registered command is also assigned to `closure.statusBar.command`, which means it will be executed when the status bar item is clicked.\n\n8. The function `registerSelectOrganizationCommand` is called with `context` and `closure` as arguments. This function is not defined in the provided code, but it likely registers another command related to selecting an organization.\n\n9. Finally, `closure.statusBar` is added to `context.subscriptions`. This means that when the extension is deactivated, the status bar item will be disposed automatically.\n\nThis code doesn't seem to use any specific algorithm, but it demonstrates several important concepts in VSCode extension development, such as creating and updating status bar items, registering commands, and managing disposables.\n\nFor more information, you can refer to the [VSCode Extension API documentation](https://code.visualstudio.com/api/references/vscode-api)."
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "13",
      "value": "\nconst pendingBoostStatusBarText = \"Boost: Organization is *PENDING*\";\nconst errorBoostStatusBarText = \"Boost: Organization is *ERROR*\";\n\nexport async function setupBoostStatus(context: vscode.ExtensionContext, closure: BoostExtension) {\n    const boostStatusBar = vscode.window.createStatusBarItem(\n        vscode.StatusBarAlignment.Left, 10);\n    closure.statusBar = boostStatusBar;\n    closure.statusBar.text = pendingBoostStatusBarText;\n    closure.statusBar.color = new vscode.ThemeColor('statusBarItem.warningForeground');\n    closure.statusBar.backgroundColor = new vscode.ThemeColor('statusBarItem.warningBackground');\n    closure.statusBar.show();\n\n    await refreshBoostOrgStatus(context, closure);\n\n    vscode.commands.registerCommand(NOTEBOOK_TYPE + '.boostStatus', \n        boostStatusCommand.bind(closure));\n    closure.statusBar.command = NOTEBOOK_TYPE + '.boostStatus';\n    registerSelectOrganizationCommand(context, closure);\n    context.subscriptions.push(closure.statusBar);\n}\n",
      "kind": 2,
      "metadata": {
        "id": 13,
        "type": "originalCode",
        "lineNumberBase": 155
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 6:04:28 PM PDT\n\nThe provided code is written in TypeScript, which is a statically typed superset of JavaScript. The code defines an asynchronous function named `refreshBoostOrgStatus`, which seems to be related to updating the status of a Boost extension in the Visual Studio Code (VSCode) environment. \n\nHere's a breakdown of what the function does:\n\n1. The function takes two parameters: `context` and `closure`. `context` is of type `vscode.ExtensionContext`, which provides VSCode extension APIs. `closure` is of type `BoostExtension`, which is likely a custom type defined elsewhere in the project.\n\n2. The function first checks if the `statusBar` property of `closure` is defined. If it's not, the function returns immediately. The `statusBar` property likely represents a status bar item in the VSCode interface.\n\n3. The function enters a `try-catch` block. If an error occurs during the execution of the code within the `try` block, the `catch` block is executed to handle the error.\n\n4. Within the `try` block, the function checks if the text of the `statusBar` is equal to `pendingBoostStatusBarText` or `errorBoostStatusBarText`. If it is, the tooltip of the `statusBar` is set to a message indicating that the account status check is pending.\n\n5. The function then calls `getCurrentOrganization(context)`, an asynchronous function that presumably retrieves the current organization. The `await` keyword is used to pause the execution of the function until the promise returned by `getCurrentOrganization(context)` is resolved.\n\n6. The text of the `statusBar` is then updated to display the name of the current organization. If the current organization is not defined (null or undefined), the text \"*UNKNOWN*\" is displayed instead.\n\n7. In the `catch` block, the function logs an error message if an error occurs during the execution of the `try` block. The text and tooltip of the `statusBar` are also updated to indicate an error.\n\n8. The function enters another `try-catch` block where it calls the asynchronous function `updateBoostStatusColors(context, undefined, closure)`. This function presumably updates the colors of the Boost status. If an error occurs during the execution of this function, an error message is logged.\n\nThe code doesn't seem to use any specific algorithms. It's mainly about handling asynchronous operations and updating UI elements based on the results of these operations.\n\nFor more information about the concepts used in this code, you can refer to the following links:\n\n- Async functions and the await keyword: [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function)\n- Try-catch statement: [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch)\n- Visual Studio Code Extension API: [VSCode API](https://code.visualstudio.com/api/references/vscode-api)"
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "14",
      "value": "\nasync function refreshBoostOrgStatus(context: vscode.ExtensionContext, closure: BoostExtension) {\n    if (!closure.statusBar) {\n        return;\n    }\n\n    try {\n        if (closure.statusBar.text === pendingBoostStatusBarText || closure.statusBar.text === errorBoostStatusBarText) {\n            closure.statusBar.tooltip = 'Current account status check *PENDING*. If problem persists, please check your GitHub Authorization status, then network connection status.';\n        }\n        const currentOrganization = await getCurrentOrganization(context);\n        closure.statusBar.text = `Boost: Organization is ${currentOrganization??\"*UNKNOWN*\"}`; \n    } catch (e : any) {\n        boostLogging.log(`Error during Activation: Unable to retrieve current organization. ${(e as Error).message}`);\n        closure.statusBar.text = errorBoostStatusBarText;\n        closure.statusBar.tooltip = `Current account status check *ERROR*. ${(e as Error).message}\\nIf problem persists, please check your GitHub Authorization status, then network connection status.`;\n    }\n    try {\n        await updateBoostStatusColors(context, undefined, closure);\n    } catch (e : any) {\n        boostLogging.log(`Error during Activation: Unable to check account status. ${(e as Error).message}`);\n    }\n}\n",
      "kind": 2,
      "metadata": {
        "id": 14,
        "type": "originalCode",
        "lineNumberBase": 173
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 6:04:59 PM PDT\n\nThe provided code is written in TypeScript and seems to be part of a Visual Studio Code (VSCode) extension, specifically the \"Polyverse Boost\" extension. The function `boostStatusCommand` is likely invoked when a certain command is executed in VSCode.\n\nHere's a line-by-line explanation:\n\n1. `function boostStatusCommand(this: any) {`: This is the declaration of the function `boostStatusCommand`. The `this` keyword is being used as a parameter, meaning the function is probably part of a class.\n\n2. The next block of code checks if the status bar text or tooltip of the extension matches certain error or pending states. If it does, it tries to refresh the status of the extension by calling `refreshBoostOrgStatus(this.context, this);`.\n\n3. After this, the function defines some constants: `openAccountDashboardButton`, `changeBillingOrganizationButton`, and `message`. These constants are used to create an information message that will be shown to the user.\n\n4. `vscode.window.showInformationMessage( ... )` is a method that displays an informational message to the user in VSCode. The message is composed of the `message` constant and two action buttons: 'Open Account Dashboard' and 'Change Billing Organization'.\n\n5. The `then` method is used to handle the user's response to the informational message. This is a promise-based function that executes after the `showInformationMessage` method completes.\n\n6. Inside the `then` block, there's a conditional that checks which button the user clicked. If the user clicked the 'Open Account Dashboard' button, it executes a command to open the customer portal. If the user clicked the 'Change Billing Organization' button, it executes a command to select an organization.\n\n7. If the user dismissed the message without clicking any button, the else block will be executed. Although it's empty in this case, it could be used for cleanup or logging.\n\nThis code doesn't seem to use any specific algorithm, but it does use the Promise-based asynchronous programming model that is common in JavaScript and TypeScript.\n\nFor more information on developing VSCode extensions, you can visit: https://code.visualstudio.com/api/get-started/your-first-extension"
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "15",
      "value": "\nfunction boostStatusCommand(this: any) {\n\n    // if the org hasn't been set yet, retry setting it\n    if (this.statusBar.text === pendingBoostStatusBarText || this.statusBar.text === errorBoostStatusBarText ||\n        this.statusBar.tooltip === gitHubAuthorizationFailureToolTip) {\n        refreshBoostOrgStatus(this.context, this);\n    }\n\n    // Define the message and button labels\n    const openAccountDashboardButton = 'Open Account Dashboard';\n    const changeBillingOrganizationButton = 'Change Billing Organization';\n\n    const message = `Status of Polyverse Boost Extension : \\n\\n${this.statusBar.tooltip}`;\n\n    // Show the information message with buttons\n    vscode.window.showInformationMessage(\n        message,\n        openAccountDashboardButton, changeBillingOrganizationButton)\n      .then(selection => {\n        // Handle the user's response\n        if (selection === openAccountDashboardButton) {\n          // The user clicked the \"Open Account Dashboard\" button\n          // Perform the appropriate action, e.g., open a URL or show a webview\n          vscode.commands.executeCommand(NOTEBOOK_TYPE + '.customerPortal');\n        } else if (selection === changeBillingOrganizationButton) {\n          // The user clicked the \"Change Billing Organization\" button\n          // Perform the appropriate action, e.g., open a URL or show a webview\n          vscode.commands.executeCommand(NOTEBOOK_TYPE + '.selectOrganization');\n        } else {\n          // The user dismissed the message without clicking any button\n          // Perform any necessary cleanup or logging\n        }\n    });\n}\n",
      "kind": 2,
      "metadata": {
        "id": 15,
        "type": "originalCode",
        "lineNumberBase": 196
      }
    },
    {
      "outputs": [
        {
          "items": [
            {
              "mime": "text/markdown",
              "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Wednesday, July 12, 2023 at 6:05:34 PM PDT\n\nThis code is written in TypeScript and is part of a Visual Studio Code (VSCode) extension. It defines a function `registerSelectOrganizationCommand`, which registers a command in the VSCode command palette that allows a user to select an organization from a list fetched from a service. \n\nThe function takes two parameters: `context` and `closure`. `context` is an object that provides common services and global (extension-wide) state, while `closure` is an instance of the `BoostExtension` class.\n\nHere's a more detailed breakdown of what the code does:\n\n1. `context.subscriptions.push(vscode.commands.registerCommand(...))`: This line registers a new command with the identifier `NOTEBOOK_TYPE + '.selectOrganization'` in the VSCode command palette.\n\n2. `const orgs: UserOrgs = await fetchUserOrganizationsServiceRequest();`: This line fetches a list of organizations from a service. The `await` keyword is used to pause and resume the async function `registerSelectOrganizationCommand` and wait for the promise's resolution or rejection.\n\n3. `const current = await getCurrentOrganization(context);`: This line fetches the current organization.\n\n4. `const quickPickItems: vscode.QuickPickItem[] = [];`: This line initializes an array of QuickPickItems. QuickPick is a simple way to show the user a list of items in the VSCode UI and let them pick one or more.\n\n5. The next few lines create QuickPickItems for each organization and add them to the `quickPickItems` array.\n\n6. `const selected = await vscode.window.showQuickPick(quickPickItems, {...});`: This line displays the QuickPick UI with the list of organizations to the user and waits for the user to pick an organization.\n\n7. `if( selected && selected.label  ) {...}`: If an organization is selected, this block of code updates the global state with the selected organization, updates the default organization in the BoostConfiguration, and updates the status bar text with the selected organization.\n\n8. `catch (err : any) {...}`: This block of code catches any errors that might occur during the execution of the try block. If an error occurs, it logs the error message using the `boostLogging.error` method.\n\nFor more details on VSCode extensions, you can refer to the VSCode Extension API documentation: https://code.visualstudio.com/api/references/vscode-api\nFor more details on async/await, you can refer to the Mozilla Developer Network (MDN) documentation: https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await"
            }
          ],
          "metadata": {
            "outputType": "explainCode",
            "details": []
          }
        }
      ],
      "languageId": "typescript",
      "id": "16",
      "value": "\nfunction registerSelectOrganizationCommand(context: vscode.ExtensionContext, closure: BoostExtension) {\n    context.subscriptions.push(vscode.commands.registerCommand(\n        NOTEBOOK_TYPE + '.selectOrganization', async () => {\n        \n        try\n        {\n            // first, fetch the organizations from the portal\n            const orgs: UserOrgs = await fetchUserOrganizationsServiceRequest();\n            const current = await getCurrentOrganization(context);\n            // Use the vscode.window.showQuickPick method to let the user select a language\n            // Create an array of QuickPickItem objects\n            const quickPickItems: vscode.QuickPickItem[] = [];        \n            // Add the \"Personal\" label and the personal organization\n            quickPickItems.push({ label: 'Personal', kind: vscode.QuickPickItemKind.Separator });\n            quickPickItems.push({ label: orgs.personal });\n            quickPickItems.push({ label: ' ', kind: vscode.QuickPickItemKind.Separator});\n\n            // Add a divider\n            quickPickItems.push({ label: 'Organizations', kind: vscode.QuickPickItemKind.Separator });\n\n            // Add the \"Organizations\" label and the list of organizations\n            orgs.organizations.forEach(org => {\n                quickPickItems.push({ label: org });\n            });\n\n            // Use the vscode.window.showQuickPick method to let the user select an organization\n            const selected = await vscode.window.showQuickPick(quickPickItems, {\n                canPickMany: false,\n                placeHolder: 'Select an organization'\n            });\n\n            //check that selected.label is not undefined\n            let organization = undefined;\n            if( selected && selected.label  ) {\n                organization = selected.label;\n\n                //put the organization in the metadata for the extension\n                context.globalState.update('organization', organization);\n\n                BoostConfiguration.defaultOrganization = organization;\n\n                //now set the selectOrgnanizationButton text\n                if( closure.statusBar){\n                    closure.statusBar.text = \"Boost: Organization is \" + organization;\n\n                    await updateBoostStatusColors(context, undefined, closure);\n                }\n            }\n        } catch (err : any) {\n            boostLogging.error(`Unable to select organization: ${err.message}.`, true);\n        }\n    }));\n}\n",
      "kind": 2,
      "metadata": {
        "id": 16,
        "type": "originalCode",
        "lineNumberBase": 231
      }
    }
  ],
  "metadata": {
    "defaultDir": ".boost",
    "sourceFile": "./src/portal.ts"
  }
}