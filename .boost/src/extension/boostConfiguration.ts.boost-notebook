{
  "cells": [
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "0",
      "value": "import { NOTEBOOK_TYPE } from \"../data/jupyter_notebook\";\n",
      "kind": 2,
      "metadata": {
        "id": 0,
        "type": "originalCode",
        "lineNumberBase": 0
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "1",
      "value": "import { workspace, extensions, ConfigurationTarget } from \"vscode\";\n",
      "kind": 2,
      "metadata": {
        "id": 1,
        "type": "originalCode",
        "lineNumberBase": 1
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "2",
      "value": "\nexport const extensionId = 'polyversecorporation.polyverse-boost-notebook';\n\nexport class BoostConfiguration {\n  \n    public static get defaultOutputLanguage(): string {\n        let command = workspace.getConfiguration(NOTEBOOK_TYPE, null).get(Defaults.defaultOutputLanguageName) as any;\n        if (command) {\n            command = command.local?command.local as string:command as string;\n        } else {\n            command = Defaults.defaultOutputLanguageValue;\n        }\n        return command;\n    }\n  \n    public static get testFramework(): string {\n        let command = workspace.getConfiguration(NOTEBOOK_TYPE, null).get(Defaults.testFrameworkName) as any;\n        if (command) {\n            command = command.local?command.local as string:command as string;\n        } else {\n            command = Defaults.testFrameworkValue;\n        }\n        return command;\n    }\n  \n    public static get defaultDir(): string {\n        let command = workspace.getConfiguration(NOTEBOOK_TYPE, null).get(Defaults.defaultDirName) as any;\n        if (command) {\n            command = command.local?command.local as string:command as string;\n        } else {\n            command = Defaults.defaultDirValue;\n        }\n        return command;\n    }\n  \n    public static get cloudServiceStage(): string {\n        let command = workspace.getConfiguration(NOTEBOOK_TYPE, null).get(Defaults.cloudServiceStageName) as any;\n        if (command) {\n            command = command.local?command.local as string:command as string;\n        } else {\n            command = Defaults.cloudServiceStageValue;\n        }\n        return command;\n    }\n  \n    public static get serviceFaultInjection(): number {\n      return (workspace.getConfiguration(NOTEBOOK_TYPE, null).get(Defaults.serviceFaultInjectionName) as number)??\n        Number(Defaults.serviceFaultInjectionValue);\n    }\n\n    public static get serializationOfCellsContainingErrors(): boolean {\n        return (workspace.getConfiguration(NOTEBOOK_TYPE, null).get(Defaults.serializationOfCellsContainingErrorsName) as boolean)??\n            Defaults.serializationOfCellsContainingErrorsValue;\n    }\n\n    public static get useSourceFileForProblems(): boolean {\n        return (workspace.getConfiguration(NOTEBOOK_TYPE, null).get(Defaults.useSourceFileForProblemsName) as boolean)??\n            Defaults.useSourceFileForProblemsValue;\n    }\n\n    public static get defaultOrganization(): string {\n        let command = workspace.getConfiguration(NOTEBOOK_TYPE, null).get(Defaults.defaultOrganizationName) as any;\n        if (command) {\n            command = command.local?command.local as string:command as string;\n        } else {\n            command = Defaults.defaultOrganizationValue;\n        }\n        return command;\n    }\n\n    public static set defaultOrganization(value: string) {\n        workspace.getConfiguration(NOTEBOOK_TYPE, null)\n            .update(Defaults.defaultOrganizationName, value, ConfigurationTarget.Global);\n    }\n\n    public static get enableDevOnlyKernels(): boolean {\n        return (workspace.getConfiguration(NOTEBOOK_TYPE, null).get(Defaults.enableDevOnlyKernelsName) as boolean)??\n            Defaults.enableDevOnlyKernelsValue;\n    }\n\n    public static get advancedChat(): boolean {\n        return (workspace.getConfiguration(NOTEBOOK_TYPE, null).get(Defaults.advancedChatName) as boolean)??\n            Defaults.advancedChatValue;\n    }\n\n    public static get currentKernelCommand(): string {\n        let command = workspace.getConfiguration(NOTEBOOK_TYPE, null).get(Defaults.currentKernelCommandName) as any;\n        if (command) {\n            command = command.local?command.local as string:command as string;\n        } else {\n            command = Defaults.currentKernelCommandValue;\n        }\n        return command;\n    }\n    public static set currentKernelCommand(value: string) {\n        workspace.getConfiguration(NOTEBOOK_TYPE, null)\n            .update(Defaults.currentKernelCommandName, value, ConfigurationTarget.Global);\n    }\n\n    public static get logLevel(): string {\n        return (workspace.getConfiguration(NOTEBOOK_TYPE, null).get(Defaults.logLevelName) as string)??\n            Defaults.logLevelValue;\n    }\n    public static set logLevel(value: string) {\n        workspace.getConfiguration(NOTEBOOK_TYPE, null)\n            .update(Defaults.logLevelName, value, ConfigurationTarget.Global);\n    }\n\n    public static get analysisTemperature(): string {\n        return (workspace.getConfiguration(NOTEBOOK_TYPE, null).get(Defaults.analysisTemperatureName) as string)??\n            Defaults.analysisTemperatureValue;\n    }\n\n    public static get analysisRankedProbability(): string {\n        return (workspace.getConfiguration(NOTEBOOK_TYPE, null).get(Defaults.analysisRankedProbabilityName) as string)??\n            Defaults.analysisRankedProbabilityValue;\n    }\n\n    public static analysisTemperatureByKernel(kernel: string): string {\n        return (workspace.getConfiguration(NOTEBOOK_TYPE, null).get(kernel + \".\" + Defaults.analysisTemperatureName) as string)??\n            Defaults.analysisTemperatureValue;\n    }\n\n    public static analysisRankedProbabilityByKernel(kernel: string): string {\n        return (workspace.getConfiguration(NOTEBOOK_TYPE, null).get(kernel + \".\" + Defaults.analysisRankedProbabilityName) as string)??\n            Defaults.analysisRankedProbabilityValue;\n    }\n\n    public static get analysisModel(): string {\n        return (workspace.getConfiguration(NOTEBOOK_TYPE, null).get(Defaults.analysisModelName) as string)??\n            Defaults.analysisModelValue;\n    }\n\n    public static analysisModelByKernel(kernel: string): string {\n        return (workspace.getConfiguration(NOTEBOOK_TYPE, null).get(kernel + \".\" + Defaults.analysisModelName) as string)??\n            Defaults.analysisModelValue;\n    }\n\n    public static get refreshAnalysisAlways(): boolean {\n        return (workspace.getConfiguration(NOTEBOOK_TYPE, null).get(Defaults.refreshAnalysisAlwaysName) as boolean)??\n            Defaults.refreshAnalysisAlwaysValue;\n    }\n\n    public static refreshAnalysisAlwaysByKernel(kernel: string): boolean {\n        return (workspace.getConfiguration(NOTEBOOK_TYPE, null).get(kernel + \".\" + Defaults.refreshAnalysisAlwaysName) as boolean)??\n            Defaults.refreshAnalysisAlwaysValue;\n    }\n\n    public static get alwaysRunSummary(): boolean {\n        return (workspace.getConfiguration(NOTEBOOK_TYPE, null).get(Defaults.alwaysRunSummaryName) as boolean)??\n            Defaults.alwaysRunSummaryValue;\n    }\n\n    public static get simulateServiceCalls(): boolean {\n        return (workspace.getConfiguration(NOTEBOOK_TYPE, null).get(Defaults.simulateServiceCallsName) as boolean)??\n            Defaults.simulateServiceCallsValue;\n    }\n\n    public static get defaultOutputFormat(): string {\n        return (workspace.getConfiguration(NOTEBOOK_TYPE, null).get(Defaults.defaultOutputFormatName) as string)??\n            Defaults.defaultOutputFormatValue;\n    }\n\n    public static get runAllTargetAnalysisType(): string {\n        return (workspace.getConfiguration(NOTEBOOK_TYPE, null).get(Defaults.runAllTargetAnalysisTypeName) as string)??\n            Defaults.runAllTargetAnalysisTypeValue;\n    }\n\n    public static get processFilesInGroups(): boolean {\n        return (workspace.getConfiguration(NOTEBOOK_TYPE, null).get(Defaults.processFilesInGroupsName) as boolean)??\n            Defaults.processFilesInGroupsValue;\n    }\n\n    static _cachedVersion: string = \"\";\n    public static get version(): string {\n        if (this._cachedVersion) {\n            return this._cachedVersion;\n        }\n\n        const extension = extensions.getExtension(extensionId);\n        if (extension) {\n          this._cachedVersion = extension.packageJSON.version;\n          return this._cachedVersion;\n        }\n\n        return \"\";\n    }\n}\n",
      "kind": 2,
      "metadata": {
        "id": 2,
        "type": "originalCode",
        "lineNumberBase": 2
      }
    },
    {
      "outputs": [],
      "languageId": "typescript",
      "id": "3",
      "value": "\nclass Defaults {\n    public static readonly defaultOutputLanguageName = \"codeConversion.outputLanguage\";\n\n    public static readonly defaultOutputLanguageValue = \"python\";\n\n    public static readonly testFrameworkName = \"testGeneration.testFramework\";\n    public static readonly testFrameworkValue = \"\";\n\n    // default directory to write Boost files\n    public static readonly defaultDirName = \"defaultDir\";\n    public static readonly defaultDirValue = \".boost\";\n\n    // specify true to use the local Boost service for debugging\n    public static readonly cloudServiceStageName = \"cloudServiceStage\";\n    public static readonly cloudServiceStageValue = \"prod\";\n\n    // specify 0-100 for the % of service requests to randomly fail at runtime\n    public static readonly serviceFaultInjectionName = \"serviceFaultInjection\";\n    public static readonly serviceFaultInjectionValue = \"0\";\n\n    public static readonly useSourceFileForProblemsName = \"useSourceFileForProblems\";\n    public static readonly useSourceFileForProblemsValue = true;\n    \n    public static readonly serializationOfCellsContainingErrorsName = \"serializationOfCellsContainingErrors\";\n    public static readonly serializationOfCellsContainingErrorsValue = true;\n\n    public static readonly defaultOrganizationName : string = \"account.defaultOrganization\";\n    public static readonly defaultOrganizationValue : string = \"\";\n\n    public static readonly enableDevOnlyKernelsName : string = \"enableDevOnlyKernels\";\n    public static readonly enableDevOnlyKernelsValue : boolean = false;\n\n    public static readonly advancedChatName : string = \"advancedChat\";\n    public static readonly advancedChatValue : boolean = true;\n\n    public static readonly currentKernelCommandName : string = \"advanced.currentKernelCommand\";\n    public static readonly currentKernelCommandValue : string = \"\";\n\n    public static readonly logLevelName : string = \"logLevel\";\n    public static readonly logLevelValue : string = \"info\";\n\n    public static readonly analysisTemperatureName : string = \"analysisTemperature\";\n    public static readonly analysisTemperatureValue : string = \"\";\n\n    public static readonly analysisRankedProbabilityName : string = \"analysisRankedProbability\";\n    public static readonly analysisRankedProbabilityValue : string = \"\";\n\n    public static readonly analysisModelName : string = \"analysisModel\";\n    public static readonly analysisModelValue : string = \"\";\n\n    public static readonly refreshAnalysisAlwaysName : string = \"advanced.refreshAnalysisAlways\";\n    public static readonly refreshAnalysisAlwaysValue : boolean = false;\n\n    public static readonly alwaysRunSummaryName : string = \"alwaysRunSummary\";\n    public static readonly alwaysRunSummaryValue : boolean = false;\n\n    public static readonly simulateServiceCallsName : string = \"simulateServiceCalls\";\n    public static readonly simulateServiceCallsValue : boolean = false;\n\n    public static readonly defaultOutputFormatName : string = \"output.defaultOutputFormat\";\n    public static readonly defaultOutputFormatValue : string = \"pdf\";\n\n    public static readonly processFilesInGroupsName : string = \"processFilesInGroups\";\n    public static readonly processFilesInGroupsValue : boolean = true;\n\n    // enables targeting a specific kernel for analysis when using run all in UX\n    // for example, if you want to run only security analysis with source id and no summary, use:\n    // bugAnalysis.analyze_function ( analysis type . kernel name)\n    // Summary won't be run at all in this case\n    // if you want to run only documentation analysis (all kernels) but no summary use:\n    // explainCode (the name of the analysis type)\n    public static readonly runAllTargetAnalysisTypeName : string = \"runAllTargetAnalysisType\";\n    public static readonly runAllTargetAnalysisTypeValue : string = \"\";\n}\n",
      "kind": 2,
      "metadata": {
        "id": 3,
        "type": "originalCode",
        "lineNumberBase": 190
      }
    }
  ],
  "metadata": {
    "defaultDir": ".boost",
    "sourceFile": "./src/extension/boostConfiguration.ts"
  }
}