{
    "markdown": "Polyverse Boost Visual Studio Extension\n=======================================\n\nWelcome to the Polyverse Boost Visual Studio extension! Boost is a powerful VS Code \"notebook\" extension designed to help you automatically convert your legacy code into a new programming language, analyze code for security vulnerabilities, and generate test cases for code using AI.\n\nGetting Started\n---------------\n\n1.  **Load a legacy source file** using the `Boost: Load File` command. This will parse the file into distinct functions and place them into a `boost-notebook` file. Each function becomes a cell.\n\n2.  **Select a command kernel** using the `Boost: Select Kernel` command. Choose from the following kernels: \"Analyze code for security vulnerabilities\", \"Convert from legacy code\", and \"Generate test cases for code\".\n\n3.  **Select the output language** for the conversion with the `Boost: Select Output Language` command (only required for the \"convert from legacy code\" kernel).\n\n4.  **Perform the boost analysis** by clicking the \"run\" triangular button on the top left of each cell. The analysis may take up to a minute for the AI to process the code. If \"run-all\" is selected, the features will be executed over all cells.\n\n5.  **Review the generated results**. After the analysis is complete, a new cell containing an English description of the code, the converted code in your selected language (e.g. Python), or generated test cases will be displayed, depending on the selected command kernel.\n\nMain Features\n-------------\n\n-   Automatically converts legacy code into a new programming language using AI.\n-   Analyzes code for security vulnerabilities.\n-   Generates test cases for code.\n-   Provides an English description of the code to help understand its functionality.\n-   Each function is placed in a separate cell, allowing for easy organization and navigation.\n-   Select from a variety of output languages for code conversion and test frameworks for generating tests.\n\nCommands\n--------\n\n-   `Boost: Load File`: Load a legacy source file to be converted.\n-   `Boost: Select Kernel`: Choose a command kernel to perform a specific task.\n-   `Boost: Select Output Language`: Choose the output language for the code conversion (only required for the \"convert from legacy code\" kernel).\n\nExtension Settings\n------------------\n\nPolyverse Boost extension settings can be configured in the Visual Studio settings, in the Extensions section under Polyverse Boost. Available settings include:\n\n-   `polyverse-boost-notebook.defaultDir`: Set the default directory for `@.boost-notebook` files.\n-   `polyverse-boost-notebook.outputLanguage`: Set the default output language for code conversion.\n-   `polyverse-boost-notebook.testFramework`: Set the default test framework to use for generating tests (e.g. pytest).\n\nTroubleshooting\n---------------\n\nIf you encounter any issues or have questions about the Polyverse Boost extension, please refer to our [documentation](https://polyverse.com) for more information and support.\n\nHappy coding!"
  }
  